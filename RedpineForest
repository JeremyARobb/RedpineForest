package redpineForest;
import java.util.Scanner;
public class RedpineForest {
	public static void main(String[] args) {
		//https://imagesvc.timeincapp.com/v3/fan/image?&url=https://winteriscoming.net/files/2015/10/Official-Map-A-Song-of-Ice-and-Fire.jpg
		
		
		int Score = 0;
		int Bonus1 = 0;
		int Bonus2 = 0;
		int Bonus3 = 0;
		int Bonus4 = 0;
                int Bonus5 = 0;
		int Bonus6 = 0;
		int Bonus7 = 0;
		int Bonus8 = 0;
		Scanner choice = new Scanner(System.in);
		Creature you = new Creature("Idk");
		int Bmining = 0;
		int Bcutting = 0;
		int BScollecting = 0;
		int Bhunting = 0;
		int Bbuilding = 0;
		int Bdefending = 0;
		String Bname;
		double FirstAttack = (int)(Math.random()* 10) + 40;
		double SecondAttack = (int)(Math.random()* 10) + 50; 
		double ThirdAttack = (int)(Math.random()* 10) + 60;
		double FirstAttackS = (int)(Math.random()* 6) + 1;
		double SecondAttackS = (int)(Math.random()* 6) + 2;
		double ThirdAttackS = (int)(Math.random()* 6) + 3;
		boolean Day = true;
		int day = 0;
		int Food = 15;
		int FoodUse = 0;
		int attack = 0;
		int creatures = 1;
		String Pro = "nu";
		String Pro2 = "yas";
		String answer;
		boolean CreatureTurtle = false;
		boolean CreatureGroundhog = false;
		boolean CreatureMeerkat = false;
		boolean game = false;
		boolean FirstQuestion = false;
		boolean SecondQuestion = false;
		boolean Tchoice = false;
		boolean Bonmining1 = false;
		boolean Boncutting1 = false;
		boolean BonScollecting1 = false;
		boolean Bonhunting1 = false;
		boolean Bonbuilding1 = false;
		boolean Bondefending1 = false;
		boolean Bonmining2 = false;
		boolean Boncutting2 = false;
		boolean BonScollecting2 = false;
		boolean Bonhunting2 = false;
		boolean Bonbuilding2 = false;
		boolean Bondefending2 = false;
		System.out.println("Now, if you need help with all the controls, say 'help' now for an extended version, else just say anything.");
		answer = choice.next();
		if (answer.equals("help") || answer.equals("Help")){
			System.out.println("");
			System.out.println("Ok, this is a game about micro management, a big part of this game is about luck, but if you play every card right it's possible to make");
			System.out.println("Even the worst run viable.");
			System.out.println("Theres no way to loose but rather theres a point system at the end, so if you run out of food all it will do is deduct from your total points");
			System.out.println("An important note is that the first time you run out of food it will not harm your final score");
			System.out.println("");
			System.out.println("Remember the golden rule: NEVER use any grammer at all, only use lowercase letters, there will be some reminders throughout the game");
			System.out.println("First, when the day starts, you can say explore, this will get you some random resources, it could also get you a creature, or teach you a blueprint and use the days turn, probably only use it if theres no other move");
			System.out.println("");
			System.out.println("Second, if you say mission or quest, a list of all the creatures you have will pop up, you can choose any of them");
			System.out.println("Once you choose them, you have an assortment of things you can say, they are the following");
			System.out.println("'startfood' (sends your creature out for food) 'startwood' 'startstone' or 'startsap'");
			System.out.println("once you say that the creatures will go on a mission to get that resource that you said after start, you must recall them within 2-7 days, not to early not to late");
			System.out.println("to do that, you say 'recall'");
			System.out.println("");
			System.out.println("Another option is that after you say what creature you want, say 'build' this will open a list of stuff you can build (some, like a farm, will almost always be there)");
			System.out.println("Others, will only be there once, like the habitat. Once you see the list of what you can build, say that building, the exact way its spelled, but without any capitals, or spaces, no spaces are needed in the whole game.");
			System.out.println("And the last option is 'defend' this will defend your walls, the higher the defense stat of the creatures, the better the defense");
			System.out.println("Finally, if you ever want to go back to the starting selection, then simply type 'back'");
			System.out.println("Thats all there is to it, if you have any more question ask the creator, oh, also a little tip, dont choose defending at the beggining if you get the option seeing as its broken.");
		}
	
		System.out.println("now say turtle groundhog or meerkat, if you dont know their distinct advantages and disadvantages ask me what they are");
				answer = choice.next();
			
				if (answer.equals("turtle") || answer.equals("Turtle")){

					you.setBuilding(7);
					int bui = you.getBuilding();
					int buil = bui + Bbuilding;
					you.setBuilding(buil);

					you.setCutting(8);
					int cut = you.getCutting();
					int cutt = cut + Bcutting;
					you.setCutting(cutt);

					you.setDefending(4);
					int def = you.getDefending();
					int defe = def + Bdefending;
					you.setDefending(defe);
					System.out.println("You chose turtle");
					you.setHunting(3);
					int hun = you.getHunting();
					int hunt = hun + Bhunting;
					you.setDefending(hunt);

					you.setMining(7);
					int min = you.getMining();
					int mini = min + Bmining;
					you.setMining(mini);

					you.setScollecting(8);
					int Sco = you.getScollecting();
					int Scol = Sco + BScollecting;
					you.setScollecting(Scol);

					you.setName("turtle");
					FoodUse ++;
					CreatureTurtle = true;
					SecondQuestion = true;
				}else if (answer.equals("groundhog") || answer.equals("Groundhog")){

					you.setBuilding(4);
					int bui = you.getBuilding();
					int buil = bui + Bbuilding;
					you.setBuilding(buil);

					you.setCutting(7);
					int cut = you.getCutting();
					int cutt = cut + Bcutting;
					you.setCutting(cutt);

					you.setDefending(3);
					int def = you.getDefending();
					int defe = def + Bdefending;
					you.setDefending(defe);

					you.setHunting(6);
					int hun = you.getHunting();
					int hunt = hun + Bhunting;
					you.setDefending(hunt);

					you.setMining(8);
					int min = you.getMining();
					int mini = min + Bmining;
					you.setMining(mini);

					you.setScollecting(7);
					int Sco = you.getScollecting();
					int Scol = Sco + BScollecting;
					you.setScollecting(Scol);

					you.setName("groundhog");
					System.out.println("You chose groundhog");
					SecondQuestion = true;
					CreatureGroundhog = true;
					FoodUse ++;

				}else if (answer.equals("meerkat") || answer.equals("Meerkat")){
					System.out.println("You chose meerkat");
					you.setBuilding(6);
					int bui = you.getBuilding();
					int buil = bui + Bbuilding;
					you.setBuilding(buil);

					you.setCutting(4);
					int cut = you.getCutting();
					int cutt = cut + Bcutting;
					you.setCutting(cutt);

					you.setDefending(9);
					int def = you.getDefending();
					int defe = def + Bdefending;
					you.setDefending(defe);

					you.setHunting(9);
					int hun = you.getHunting();
					int hunt = hun + Bhunting;
					you.setDefending(hunt);

					you.setMining(5);
					int min = you.getMining();
					int mini = min + Bmining;
					you.setMining(mini);

					you.setScollecting(4);
					int Sco = you.getScollecting();
					int Scol = Sco + BScollecting;
					you.setScollecting(Scol);

					you.setName("meerkat");

					SecondQuestion = true;

					double AnimalName = (int)(Math.random()* 3);

					if (AnimalName == 0){
						System.out.println("Sincerly, Meeraka");
					}
					if (AnimalName == 1){
						System.out.println("Yours truly, Meera");
					}
					if (AnimalName == 2){
						System.out.println("Your best turtle friend, Meera");
					}

					FoodUse ++;
					CreatureMeerkat = true;
				}else{
					System.out.println("Say 'turtle', 'groundhog', or 'meerkat'");
					System.out.println("");
				}

		//boolean for resources
		boolean YouFood = false;
		boolean YouWood = false;
		boolean YouSap = false;
		boolean YouStone = false;
		boolean YouDefend = false;
		int YouDefense = 0;

		boolean MurlokFood = false;
		boolean MurlokWood = false;
		boolean MurlokSap = false;
		boolean MurlokStone = false;
		boolean MurlokDefend = false;
		int MurlokDefense = 0;

		boolean WhelpFood = false;
		boolean WhelpWood = false;
		boolean WhelpSap = false;
		boolean WhelpStone = false;
		boolean WhelpDefend = false;
		int WhelpDefense = 0;

		boolean GoblinFood = false;
		boolean GoblinWood = false;
		boolean GoblinSap = false;
		boolean GoblinStone = false;
		boolean GoblinDefend = false;
		int GoblinDefense = 0;

		boolean BristleFood = false;
		boolean BristleWood = false;
		boolean BristleSap = false;
		boolean BristleStone = false;
		boolean BristleDefend = false;
		int BristleDefense = 0;

		boolean KnarlFood = false;
		boolean KnarlWood = false;
		boolean KnarlSap = false;
		boolean KnarlStone = false;
		boolean KnarlDefend = false;
		int KnarlDefense = 0;

		boolean DuckFood = false;
		boolean DuckWood = false;
		boolean DuckSap = false;
		boolean DuckStone = false;
		boolean DuckDefend = false;
		int DuckDefense = 0;

		boolean BasiliskFood = false;
		boolean BasiliskWood = false;
		boolean BasiliskSap = false;
		boolean BasiliskStone = false;
		boolean BasiliskDefend = false;
		int BasiliskDefense = 0;

		boolean HobleheadFood = false;
		boolean HobleheadWood = false;
		boolean HobleheadSap = false;
		boolean HobleheadStone = false;
		boolean HobleheadDefend = false;
		int HobleheadDefense = 0;

		//animal bools: ADD when you add an animal

		//i left off just finishing making the tavern, or the recruit mechanism
		//goblin
		//whelp
		//bristle
		//knarl
		//duck - call him dug

		boolean TurtleActive = false;
		boolean GroundhogActive = false;
		boolean MeerkatActive = false;
		boolean YouBuilding = false;
		boolean YouBuildingTownCenter = false;
		boolean YouBuildingFarm = false;
		boolean YouBuildingUFarm = false;
		boolean YouBuildingHabitat = false;
		boolean YouBuildingGranary = false;
		boolean YouBuildingSmith = false;
		boolean YouBuildingTavern = false;
		boolean YouBuildingTownBoard = false;
		boolean YouBuildingTownHall = false;
		boolean YouBuildingWalls = false;
		boolean YouBuildingUWalls = false;
		
		Creature Hoblehead = new Creature("hoblehead");
		boolean CreatureHoblehead = false;
		boolean HobleheadActive = false;
		boolean HobleheadBuilding = false;
		Hoblehead.setName("hoblehead");
		boolean HobleheadBuildingTownCenter = false;
		boolean HobleheadBuildingFarm = false;
		boolean HobleheadBuildingUFarm = false;
		boolean HobleheadBuildingHabitat = false;
		boolean HobleheadBuildingGranary = false;
		boolean HobleheadBuildingSmith = false;
		boolean HobleheadBuildingTavern = false;
		boolean HobleheadBuildingTownBoard = false;
		boolean HobleheadBuildingTownHall = false;
		boolean HobleheadBuildingWalls = false;
		boolean HobleheadBuildingUWalls = false;

		Creature Murlok = new Creature("murlok");
		boolean CreatureMurlok = false;
		boolean MurlokActive = false;
		boolean MurlokBuilding = false;
		boolean MurlokBuildingTownCenter = false;
		boolean MurlokBuildingFarm = false;
		boolean MurlokBuildingUFarm = false;
		boolean MurlokBuildingHabitat = false;
		boolean MurlokBuildingGranary = false;
		boolean MurlokBuildingSmith = false;
		boolean MurlokBuildingTavern = false;
		boolean MurlokBuildingTownBoard = false;
		boolean MurlokBuildingTownHall = false;
		boolean MurlokBuildingWalls = false;
		boolean MurlokBuildingUWalls = false;

		Creature Basilisk = new Creature("basilisk");
		boolean CreatureBasilisk = false;
		boolean BasiliskActive = false;
		boolean BasiliskBuilding = false;
		Basilisk.setName("basilisk");
		Basilisk.setBuilding(15);
		Basilisk.setCutting(15);
		Basilisk.setDefending(15);
		Basilisk.setHunting(15);
		Basilisk.setMining(15);
		Basilisk.setScollecting(15);
		boolean BasiliskBuildingTownCenter = false;
		boolean BasiliskBuildingFarm = false;
		boolean BasiliskBuildingUFarm = false;
		boolean BasiliskBuildingHabitat = false;
		boolean BasiliskBuildingGranary = false;
		boolean BasiliskBuildingSmith = false;
		boolean BasiliskBuildingTavern = false;
		boolean BasiliskBuildingTownBoard = false;
		boolean BasiliskBuildingTownHall = false;
		boolean BasiliskBuildingWalls = false;
		boolean BasiliskBuildingUWalls = false;

		Creature Goblin = new Creature("Goblin");
		boolean CreatureGoblin = false;
		boolean GoblinActive = false;
		boolean GoblinBuilding = false;
		boolean GoblinBuildingTownCenter = false;
		boolean GoblinBuildingFarm = false;
		boolean GoblinBuildingUFarm = false;
		boolean GoblinBuildingHabitat = false;
		boolean GoblinBuildingGranary = false;
		boolean GoblinBuildingSmith = false;
		boolean GoblinBuildingTavern = false;
		boolean GoblinBuildingTownBoard = false;
		boolean GoblinBuildingTownHall = false;
		boolean GoblinBuildingWalls = false;
		boolean GoblinBuildingUWalls = false;

		Creature Whelp = new Creature("Whelp");
		boolean CreatureWhelp = false;
		boolean WhelpActive = false;
		boolean WhelpBuilding = false;
		boolean WhelpBuildingTownCenter = false;
		boolean WhelpBuildingFarm = false;
		boolean WhelpBuildingUFarm = false;
		boolean WhelpBuildingHabitat = false;
		boolean WhelpBuildingGranary = false;
		boolean WhelpBuildingSmith = false;
		boolean WhelpBuildingTavern = false;
		boolean WhelpBuildingTownBoard = false;
		boolean WhelpBuildingTownHall = false;
		boolean WhelpBuildingWalls = false;
		boolean WhelpBuildingUWalls = false;

		Creature Bristle = new Creature("Bristle");
		boolean CreatureBristle = false;
		boolean BristleActive = false;
		boolean BristleBuilding = false;
		boolean BristleBuildingTownCenter = false;
		boolean BristleBuildingFarm = false;
		boolean BristleBuildingUFarm = false;
		boolean BristleBuildingHabitat = false;
		boolean BristleBuildingGranary = false;
		boolean BristleBuildingSmith = false;
		boolean BristleBuildingTavern = false;
		boolean BristleBuildingTownBoard = false;
		boolean BristleBuildingTownHall = false;
		boolean BristleBuildingWalls = false;
		boolean BristleBuildingUWalls = false;

		Creature Knarl = new Creature("Knarl");
		boolean CreatureKnarl = false;
		boolean KnarlActive = false;
		boolean KnarlBuilding = false;
		boolean KnarlBuildingTownCenter = false;
		boolean KnarlBuildingFarm = false;
		boolean KnarlBuildingUFarm = false;
		boolean KnarlBuildingHabitat = false;
		boolean KnarlBuildingGranary = false;
		boolean KnarlBuildingSmith = false;
		boolean KnarlBuildingTavern = false;
		boolean KnarlBuildingTownBoard = false;
		boolean KnarlBuildingTownHall = false;
		boolean KnarlBuildingWalls = false;
		boolean KnarlBuildingUWalls = false;

		Creature Duck = new Creature("Duck");
		boolean CreatureDuck = false;
		boolean DuckActive = false;
		boolean DuckBuilding = false;
		boolean DuckBuildingTownCenter = false;
		boolean DuckBuildingFarm = false;
		boolean DuckBuildingUFarm = false;
		boolean DuckBuildingHabitat = false;
		boolean DuckBuildingGranary = false;
		boolean DuckBuildingSmith = false;
		boolean DuckBuildingTavern = false;
		boolean DuckBuildingTownBoard = false;
		boolean DuckBuildingTownHall = false;
		boolean DuckBuildingWalls = false;
		boolean DuckBuildingUWalls = false;


		//ALL OF THE BUILDINGS
		boolean TownCenter = true;
		boolean TownCenterB = false;
		boolean TownCenterF = false;
		int TownCenterDays = 0;

		boolean Farm = false;
		boolean FarmB = false;
		boolean FarmF = false;
		int FarmDays = 0;
		int FarmC = 0;

		boolean UFarm = false;
		boolean UFarmB = false;
		boolean UFarmF = false;
		int UFarmDays = 0;

		boolean Habitat = false;
		boolean HabitatB = false;
		boolean HabitatF = false;
		int HabitatDays = 0;

		boolean Smith = false;
		boolean SmithB = false;
		boolean SmithF = false;
		int SmithDays = 0;
		int SmithC = 0;

		boolean Tavern = false;
		boolean TavernB = false;
		boolean TavernF = false;
		boolean TavernU = false;
		int TavernDays = 0;

		boolean Granary = false;
		boolean GranaryB = false;
		boolean GranaryF = false;
		boolean GranaryU = false;
		int GranaryDays = 0;

		boolean TownBoard = false;
		boolean TownBoardB = false;
		boolean TownBoardF = false;
		boolean TownBoardU = false;
		int TownBoardDays = 0;

		boolean TownHall = false;
		boolean TownHallB = false;
		boolean TownHallF = false;
		boolean TownHallU = false;
		int TownHallDays = 0;

		boolean Walls = false;
		boolean WallsB = false;
		boolean WallsF = false;
		boolean WallsU = false;
		int WallsDays = 0;
		int UWallUU = 0;


		boolean UWalls = false;
		boolean UWallsB = false;
		boolean UWallsF = false;
		int UWallsDays = 0;
		boolean UWallsWait = false;

		//bonuses for building



		boolean FarmBonus = false;
		int FarmFood = 0;

		boolean Recruit = false;

		boolean ExtraTurnR = false;
		boolean ExtraTurn = false;

		boolean DayFinish = false;
		boolean DayChoice = true;

		int resources = 0;
		int wood = 0;
		int sap = 0;
		int food = 20;
		int defense = 0;
		int stone = 0;


		int Cwood = 0;
		int Csap = 0;
		int Cfood = 0;
		int Cstone = 0;

		//the shop items
		boolean shop = false;
		boolean CommandCenter = false;
		boolean ETurn = false;


		boolean Extension = false;
		boolean Fountain = false;
		boolean MasterSmith = false;
		boolean Jack = false;

		//------------------END TALLY THINGS------------------------
		int FoodShortage = 0;

		
		
		//-------------END TALLY THINGS END?------------------------
		boolean back = false;

		//GAME BEGINS HERE

		//if its a new day you need: 
		//Boolean Day == true
		while (game == false){

			if (Day == true){
                                                System.out.println("---------------------------------------------------------------------------------------------");
				double DayScript = (int)(Math.random()* 7);
				if (DayScript == 1){
					System.out.println("As dawn approaches the day is " + day);	
					System.out.println("");
					Day = false;
				}else if (DayScript == 0){
					System.out.println("A GMMRooster blows it firespout signifying day " + day);
					System.out.println("");
					Day = false;
				}else if (DayScript == 2){
					System.out.println("You wake up with a feeling of readiness! The day is " + day);
					System.out.println("");
					Day = false;
				}else if (DayScript == 3){
					System.out.println("You wake up feeling kind of bored honestly, the day is a measly " + day);
					System.out.println("");
					Day = false;
				}else if (DayScript == 4){
					System.out.println("The day is " + day);
					System.out.println("");
					Day = false;
				}else if (DayScript == 5){
					System.out.println("Another Beautiful day in Redpine forest! The day is " + day);
					System.out.println("");
					Day = false;
				}else if (DayScript == 6){
					System.out.println("what a day to be alive on the shore, the day is " + day);
					System.out.println("");
					Day = false;
				}	
			}
			if (FirstAttack == day){
				if (defense >= FirstAttackS){
					System.out.println("");
					System.out.println("An attack on the camp happens! you're able to ward it off, they give up the location of a small amount of resources");
					System.out.println("+4 to everything");
					wood += 4;
					stone += 4;
					sap += 4;
					food += 4;
				}
				if (defense < FirstAttackS){
					System.out.println("");
					System.out.println("An attack on the camp happens! They invade and take some stuff. -10 everything, -5 food");
					wood -= 10;
					stone -= 10;
					sap -= 10;
					food -= 5;
				}
			}
			if (SecondAttack == day){
				if (defense >= SecondAttackS){
					System.out.println("");
					System.out.println("An attack on the camp happens again, but you manage to defend it, the locals give you many goods for getting rid of the thieves");
					System.out.println("+8 to everything");
					wood += 8;
					stone += 8;
					sap += 8;
					food += 8;
				}
				if (defense < SecondAttackS){
					System.out.println("");
					System.out.println("An attack on the camp happens again, the enemy ransaks you for a lot. -15 everything, -10 food");
					wood -= 15;
					stone -= 15;
					sap -= 15;
					food -= 10;
				}
			}
			if (ThirdAttack == day){
				if (defense >= ThirdAttackS){
					System.out.println("");
					System.out.println("A third and final attack is made on the camp, and you defend it, King Redvale is overjoyed at you taking them out");
					System.out.println("+12 to everything");
					wood += 12;
					stone += 12;
					sap += 12;
					food += 12;
				}
				if (defense < ThirdAttackS){
					System.out.println("");
					System.out.println("A third and final attack is made on the camp, and they take quite a lot of your resources.. quite a lot, -20 everything, -10 food");
					wood -= 20;
					stone -= 20;
					sap -= 20;
					food -= 10;
				}
			}

			if (sap < 0){
				System.out.println("sap was less than 0, it was set back to 0");
				sap = 0;
			}
			if (stone < 0){
				System.out.println("stone was less than 0, it was set back to 0");
				stone = 0;
			}
			if (wood < 0){
				System.out.println("wood was less than 0, it was set back to 0");
				wood = 0;
			}
			if (food < 0){
				FoodShortage += 1;
				food = 15;
				System.out.println("food was less than 0, it's now 15, you have had " + FoodShortage + " Food Shortages (remember, 1 shortage wont harm you, but any more beyond that will)");
			}
			while (DayChoice == true){
				System.out.println("Choices are 'quest' - 'resources (does not end turn)' - 'work' - 'explore' - 'back' (to go back to this starting selection screen)");
				if (Recruit == true){
					System.out.print(" - 'recruit'");
				}
				if (shop == true){
					System.out.print(" - and finally 'shop'");
				}
				System.out.println("");
				answer = choice.next();
				if (answer.equals("resources") || answer.equals("Resources") || answer.equals("Stats") || answer.equals("stats")){
					System.out.println("Stone is: " + stone);
					System.out.println("Wood is: " + wood);
					System.out.println("Sap is: " + sap);
					System.out.println("Food is: " + food);
					System.out.println("FoodUse is: " + FoodUse);
					System.out.println("Food Creation is: " + FarmFood);
					answer = choice.next();
				}
				if (answer.equals("shop") && shop == false){
					System.out.println("You dont have the shop yet");
					answer = choice.next();
				}
				if (answer.equals("recruit") && Recruit == false){
					System.out.println("You dont have the tavern yet");
					answer = choice.next();
				}
				if (answer.equals("work") || answer.equals("work")){
					System.out.println("You work to create some food. +4 food");
					food = food + 4;
					DayChoice = false;
				}


				/*	boolean CommandCenter = false;
				boolean Extension = false;
				boolean Fountain = false;
				boolean MasterSmith = false;
				boolean Jack = false;     */


				if (answer.equals("shop") && shop == true){
					System.out.println("Heres what you can buy");
					System.out.println("");
					if (CommandCenter == false){
						System.out.println("CommandCenter");
						System.out.println("Wood: 25");
						System.out.println("Stone: 25");
						System.out.println("");
					}
					if (Extension == false){
						System.out.println("Extension");
						System.out.println("Wood: 20");
						System.out.println("Stone: 15");
						System.out.println("Sap: 15");
						System.out.println("");
					}
					if (Fountain == false){
						System.out.println("Fountain");
						System.out.println("Stone: 20");
						System.out.println("Sap: 25");
						System.out.println("");
					}
					if (MasterSmith == false){
						System.out.println("MasterSmith");
						System.out.println("Wood: 25");
						System.out.println("Stone: 25");
						System.out.println("Sap: 15");
						System.out.println("");
					}
					if (Jack == false){
						System.out.println("Jack Of All Trades (say jack to buy)");
						System.out.println("Food: 15");
						System.out.println("");
						creatures += 1;
					}
					answer = choice.next();

					if (answer.equals("jack") && Jack == false && food >= 15){
						System.out.println("A basilisk joins your civilization (it uses 2 food a day)");
						food -= 15;
						Jack = true;
						FoodUse += 2;
						creatures += 1;
						CreatureBasilisk = true;
					}
					if (answer.equals("commandcenter") && CommandCenter == false && wood >= 25 && stone >= 25){
						wood -= 25;
						stone -= 25;
						System.out.println("You Purchase the CommandCenter");
						System.out.println("Now you'll be able to issue two commands per day (starting tomorrow)");
						CommandCenter = true;
						DayChoice = false;
					}
					if (answer.equals("extension") && Extension == false && wood >= 20 && stone >= 15 && sap >= 15){
						wood -= 20;
						stone -= 15;
						sap -= 15;
						System.out.println("You Purchase the Extension");
						System.out.println("you have 10 more days to use as you see fit (no attacks will happen on these 10 days)");
						Extension = true;
						DayChoice = false;
					}
					if (answer.equals("fountain") && Fountain == false && stone >= 20 && sap >= 25){
						stone -= 20;
						sap -= 25;
						System.out.println("You Purchase the fountain");
						System.out.println("This will help a bit with our critics final score");
						Fountain = true;
						DayChoice = false;
					}
					if (answer.equals("mastersmith") && MasterSmith == false && wood >= 25 && stone >= 25 && sap >= 15){
						wood -= 25;
						stone -= 25;
						sap -= 15;
						System.out.println("You Purchase a MasterSmith");
						System.out.println("He will help out all your creatures stats enormously");
						MasterSmith = true;
						DayChoice = false;
						you.setBuilding(you.getBuilding() * 3 / 2);
						you.setDefending(you.getDefending() * 3 / 2);
						you.setCutting(you.getCutting() * 3 / 2);
						you.setHunting(you.getHunting() * 3 / 2);
						you.setMining(you.getMining() * 3 / 2);
						you.setScollecting(you.getScollecting() * 3 / 2);

						Murlok.setBuilding(Murlok.getBuilding() * 3 / 2);
						Murlok.setDefending(Murlok.getDefending() * 3 / 2);
						Murlok.setCutting(Murlok.getCutting() * 3 / 2);
						Murlok.setHunting(Murlok.getHunting() * 3 / 2);
						Murlok.setMining(Murlok.getMining() * 3 / 2);
						Murlok.setScollecting(Murlok.getScollecting() * 3 / 2);

						Goblin.setBuilding(Goblin.getBuilding() * 3 / 2);
						Goblin.setDefending(Goblin.getDefending() * 3 / 2);
						Goblin.setCutting(Goblin.getCutting() * 3 / 2);
						Goblin.setHunting(Goblin.getHunting() * 3 / 2);
						Goblin.setMining(Goblin.getMining() * 3 / 2);
						Goblin.setScollecting(Goblin.getScollecting() * 3 / 2);

						Whelp.setBuilding(Whelp.getBuilding() * 3 / 2);
						Whelp.setDefending(Whelp.getDefending() * 3 / 2);
						Whelp.setCutting(Whelp.getCutting() * 3 / 2);
						Whelp.setHunting(Whelp.getHunting() * 3 / 2);
						Whelp.setMining(Whelp.getMining() * 3 / 2);
						Whelp.setScollecting(Whelp.getScollecting() * 3 / 2);

						Bristle.setBuilding(Bristle.getBuilding() * 3 / 2);
						Bristle.setDefending(Bristle.getDefending() * 3 / 2);
						Bristle.setCutting(Bristle.getCutting() * 3 / 2);
						Bristle.setHunting(Bristle.getHunting() * 3 / 2);
						Bristle.setMining(Bristle.getMining() * 3 / 2);
						Bristle.setScollecting(Bristle.getScollecting() * 3 / 2);

						Knarl.setBuilding(Knarl.getBuilding() * 3 / 2);
						Knarl.setDefending(Knarl.getDefending() * 3 / 2);
						Knarl.setCutting(Knarl.getCutting() * 3 / 2);
						Knarl.setHunting(Knarl.getHunting() * 3 / 2);
						Knarl.setMining(Knarl.getMining() * 3 / 2);
						Knarl.setScollecting(Knarl.getScollecting() * 3 / 2);

						Duck.setBuilding(Duck.getBuilding() * 3 / 2);
						Duck.setDefending(Duck.getDefending() * 3 / 2);
						Duck.setCutting(Duck.getCutting() * 3 / 2);
						Duck.setHunting(Duck.getHunting() * 3 / 2);
						Duck.setMining(Duck.getMining() * 3 / 2);
						Duck.setScollecting(Duck.getScollecting() * 3 / 2);

						Basilisk.setBuilding(Basilisk.getBuilding() * 3 / 2);
						Basilisk.setDefending(Basilisk.getDefending() * 3 / 2);
						Basilisk.setCutting(Basilisk.getCutting() * 3 / 2);
						Basilisk.setHunting(Basilisk.getHunting() * 3 / 2);
						Basilisk.setMining(Basilisk.getMining() * 3 / 2);
						Basilisk.setScollecting(Basilisk.getScollecting() * 3 / 2);

						Hoblehead.setBuilding(Hoblehead.getBuilding() * 3 / 2);
						Hoblehead.setDefending(Hoblehead.getDefending() * 3 / 2);
						Hoblehead.setCutting(Hoblehead.getCutting() * 3 / 2);
						Hoblehead.setHunting(Hoblehead.getHunting() * 3 / 2);
						Hoblehead.setMining(Hoblehead.getMining() * 3 / 2);
						Hoblehead.setScollecting(Hoblehead.getScollecting() * 3 / 2);
					}
				}

				if (answer.equals("recruit") && Recruit == true){
					double Find = (int)(Math.random()* 9);
					if (Find == 0 && CreatureGoblin == false){
						System.out.println(" ");
						System.out.println("Hey, I heard you were lookin for some people, I'm in.");
						System.out.println("The Goblin joins your group");
						System.out.println(" ");
						CreatureGoblin = true;
						creatures += 1;
						FoodUse += 3;
						Goblin.setName("Goblin");
						DayChoice = false;
					}
					if (Find == 0 && CreatureGoblin == true){
						System.out.println("You see a goblin (different than the one you have) swindling some creatures, you stay far away");
						DayChoice = false;
					}
					if (Find == 1 && CreatureWhelp == false){
						System.out.println(" ");
						System.out.println("A whelp breathes fire all over your pint of shire, to heat it up. its his.. warm way of saying he's in");
						System.out.println("The Whelp joins your group");
						System.out.println(" ");
						CreatureWhelp = true;
						Whelp.setName("Whelp");
						creatures += 1;
						FoodUse += 3;
						DayChoice = false;
					}
					if (Find == 1 && CreatureWhelp == true){
						System.out.println("You dont find anyone, but you hear the inkeeper mumbling about a whelp burning through all his mugs");
						DayChoice = false;
					}
					if (Find == 2 && CreatureBristle == false){
						System.out.println(" ");
						System.out.println("You spot a nice looking fellow, blink, and suddenly it's a not so nice fellow. You realise it was cause there were some geese looking at him, plotting.");
						System.out.println("It turns out that 'fellow' was a bristle! it agrees to join your group");
						System.out.println("The Bristle joins your group");
						System.out.println(" ");
						CreatureBristle = true;
						creatures +=1;
						FoodUse += 3;
						Bristle.setName("Bristle");
						DayChoice = false;
					}
					if (Find == 2 && CreatureBristle == true){
						System.out.println("You see a game of gwent going on, on one side a goblin, on the other a bristle, it was quite hard to tell who had a better poker face... seing as they both looked exactly alike");
						DayChoice = false;
					}
					if (Find == 3 && CreatureKnarl == false){
						System.out.println(" ");
						System.out.println("An adorable knarl comes up to you and asks to join your group, knowing they have the 3 C's (they are cunning, cute, and coregeous) you are compelled to say yes");
						System.out.println("The Knarl joins your group");
						System.out.println(" ");
						CreatureKnarl = true;
						creatures +=1;
						FoodUse += 3;
						DayChoice = false;
					}
					if (Find == 3 && CreatureKnarl == true){
						System.out.println("You see a knarl, you never can get over how adorable they are");
						DayChoice = false;
					}
					if (Find == 4 && CreatureDuck == false){
						System.out.println(" ");
						System.out.println("A small duck approaches you, she says 'hi, im Dug, Dug the Devourer");
						System.out.println("Dug (the duck) joins your group");
						System.out.println(" ");
						Duck.setName("Duck");
						CreatureDuck = true;
						creatures +=1;
						FoodUse += 3;
						DayChoice = false;
					}
					if (Find == 4 && CreatureDuck == true){
						System.out.println("you see Dug waddle up to a group of geese. Hi, im Dug the Devourer, you cant even bear to watch what happens next");
						DayChoice = false;
					}
					if (Find == 5){
						System.out.println("No one takes note in talking to you of staying here, at least, you think, you can't really remember (it was happy hour, the grog was half off)");
						DayChoice = false;
					}
					if (Find == 6){
						System.out.println("A goblin asks you if you want to flip a coin, he wins he takes 20 food, you win, you get 10 wood, 10 stone, and 10 sap (say yes or no)");
						while (Tchoice == false){
							answer = choice.next();
							if (answer.equals("yes") || answer.equals("Yes")){
								double Flip = (int)(Math.random()* 2);
								if (Flip == 0){
									System.out.println("It lands on his side, he takes 15 food");
									food -= 15;
									Tchoice = true;
									DayChoice = false;
								}
								if (Flip == 1){
									System.out.println("It lands on your side, you reap your rewards");
									wood += 10;
									stone += 10;
									sap += 10;
									Tchoice = true;
									DayChoice = false;
								}
							}else if (answer.equals("no") || answer.equals("No")){
								System.out.println("The goblin looks dissapointed, 'you let a good deal slip away you did' he says as he leaves");
								Tchoice = true;
								DayChoice = false;
							}else{
								System.out.println("'Well, cmon then, 'yes' or 'no'?");
							}
						}
					}

					if (Find == 7){
						System.out.println("You get a good deal on some food, and buy it up, +3 food");
						food += 3;
						DayChoice = false;
					}
					if (Find == 8){
						System.out.println("A barfight starts, you break 3 pieces of wood after cracking it over all the of the little pigs heads. -3 wood");
						wood -= 3;
						DayChoice = false;
					}
				}
				if (answer.equals("Mission") || answer.equals("mission") || answer.equals("Quest") || answer.equals("quest")){
					System.out.println("what creature would you like to select?");
					System.out.println("You have these creatures:");

					if (CreatureHoblehead == true){
						if (HobleheadActive == true){
						System.out.println(Hoblehead.getName() + " - Active");
						}else if (HobleheadActive == false){
							System.out.println(Hoblehead.getName() + " - Inactive");
						}
					}
					if (CreatureBasilisk == true){
						if (BasiliskActive == true){
							System.out.println(Basilisk.getName() + " - Active");
							}else if (BasiliskActive == false){
								System.out.println(Basilisk.getName() + " - Inactive");
							}
					}
					if (CreatureMurlok == true){
						if (MurlokActive == true){
							System.out.println(Murlok.getName() + " - Active");
							}else if (MurlokActive == false){
								System.out.println(Murlok.getName() + " - Inactive");
							}
					}
					if (CreatureGoblin == true){
						if (GoblinActive == true){
							System.out.println(Goblin.getName() + " - Active");
							}else if (GoblinActive == false){
								System.out.println(Goblin.getName() + " - Inactive");
							}
					}
					if (CreatureWhelp == true){
						if (WhelpActive == true){
							System.out.println(Whelp.getName() + " - Active");
							}else if (WhelpActive == false){
								System.out.println(Whelp.getName() + " - Inactive");
							}
					}
					if (CreatureBristle == true){
						if (BristleActive == true){
							System.out.println(Bristle.getName() + " - Active");
							}else if (BristleActive == false){
								System.out.println(Bristle.getName() + " - Inactive");
							}
					}
					if (CreatureKnarl == true){
						if (KnarlActive == true){
							System.out.println(Knarl.getName() + " - Active");
							}else if (KnarlActive == false){
								System.out.println(Knarl.getName() + " - Inactive");
							}
					}
					if (CreatureDuck == true){
						if (DuckActive == true){
							System.out.println(Duck.getName() + " or Dug... Dug the devourer" + " - Active");
							}else if (DuckActive == false){
								System.out.println(Duck.getName() + " or Dug... Dug the devourer" + " - Inactive");
							}
					}
				System.out.println(you.getName());
					answer = choice.next();
					if (answer.equals("back") || answer.equals("Back")){
						back = true;
					}
					//------------------------------HOBLEHEAD START------------------------------
					if (answer.equals("hoblehead") && CreatureHoblehead == true){
						System.out.println("what would you like to do with the Hoblehead?");
						System.out.println("You can say 'start(insert what resource you want to get) or 'defend' or 'build'");
						System.out.println("If you want to recall a to reap your resources say 'recall' (Creature must be active)");
						answer = choice.next();
						if (answer.equals("back") || answer.equals("Back")){
							back = true;
						}
						if (answer.equals("stats")){
							System.out.println("Hunting: " + Hoblehead.getHunting());
							System.out.println("Sap Collecting: " + Hoblehead.getScollecting());
							System.out.println("Mining: " + Hoblehead.getMining());
							System.out.println("Cutting (wood): " + Hoblehead.getCutting());
							System.out.println("Defending: " + Hoblehead.getDefending());
							System.out.println("Building: " + Hoblehead.getBuilding());
							answer = choice.next();
						}
						//------------------------------DEFENDING-------------------------------
						if (answer.equals("defend") && HobleheadActive == false){
							System.out.println("Your Hoblehead starts defending the camp");
							if (Hoblehead.getDefending() < 3){
								defense += 1;
								HobleheadDefense = 1;
							}else if (Hoblehead.getDefending() > 3 && Hoblehead.getDefending() < 7){
								defense += 2;
								HobleheadDefense = 2;
							}else{
								defense += 3;
								HobleheadDefense = 3;
							}
							HobleheadDefend = true;
							HobleheadActive = true;
							DayChoice = false;
						}
						if (answer.equals("recall") && HobleheadDefend == true && HobleheadActive == true){
							defense = defense - HobleheadDefense;
							HobleheadDefense = 0;
							HobleheadActive = false;
							DayChoice = false;
						}
						//-----------------------------DEFENDING END----------------------------
						//------------------------------BUILDING--------------------------------

						if (answer.equals("build") && HobleheadActive == false){
							System.out.println("Here is what you can build");
							if (UWalls == true){
								System.out.println("UpgradedWalls");
								System.out.println("days: 7");
								System.out.println("stone: 10");
								System.out.println("sap: 5");
								System.out.println("");
							}
							if (Walls == true){
								System.out.println("Walls");
								System.out.println("days: 7");
								System.out.println("wood: 10");
								System.out.println("sap: 5");
								System.out.println("");
							}
							if (TownBoard == true){
								System.out.println("TownBoard");
								System.out.println("days: 5");
								System.out.println("wood: 5");
								System.out.println("stone: 5");
								System.out.println("sap: 5");
								System.out.println("");
							}
							if (TownHall == true){
								System.out.println("TownHall");
								System.out.println("days: 16");
								System.out.println("wood: 20");
								System.out.println("stone: 10");
								System.out.println("sap: 5");
								System.out.println("");
							}
							if (Granary == true){
								System.out.println("Granary");
								System.out.println("Days: 12");
								System.out.println("Sap: 15");
								System.out.println("Stone: 15");
								System.out.println("");
							}
							if (Tavern == true){
								System.out.println("Tavern");
								System.out.println("days: 15");
								System.out.println("wood: 15");
								System.out.println("stone: 10");
								System.out.println("food: 5");
								System.out.println("");
							}
							if (Smith == true){
								System.out.println("Smith");
								System.out.println("days: 9");
								System.out.println("stone: 15");
								System.out.println("sap: 5");
								System.out.println("");
							}
							if (UFarm == true){
								System.out.println("UpgradedFarm");
								System.out.println("days: 12");
								System.out.println("wood: 10");
								System.out.println("food: 5");
								System.out.println("sap: 10");
								System.out.println("");
							}
							if (TownCenter == true){
								System.out.println("TownCenter");
								System.out.println("days: 5");
								System.out.println("wood: 10");
								System.out.println("sap: 5");
								System.out.println("");
							}
							if (Farm == true){
								System.out.println("Farm");
								System.out.println("days: 6");
								System.out.println("food: 5");
								System.out.println("stone: 5");
								System.out.println("");
							}
							if (Habitat == true){
								System.out.println("Habitat");
								System.out.println("days: 10");
								System.out.println("wood: 5");
								System.out.println("sap: 5");
								System.out.println("stone: 5");
								System.out.println("");
							}

							else if (answer.equals("build") && HobleheadActive == true){
								System.out.println("The Hoblehead is busy (on a mission or building something)");
							}


							System.out.println("What, of those, would you like to build? (Remember, dont use any caps!)");
							System.out.println("If you need to see your resources say resources");
							answer = choice.next();

							if (answer.equals("resources") || answer.equals("Resources") || answer.equals("Stats") || answer.equals("stats")){
								System.out.println("Stone is: " + stone);
								System.out.println("Wood is: " + wood);
								System.out.println("Sap is: " + sap);
								System.out.println("Food is: " + food);
								System.out.println("FoodUse is: " + FoodUse);
								answer = choice.next();
							}
							if (answer.equals("back") || answer.equals("Back")){
								back = true;
							}
							if (answer.equals("upgradedwalls") && UWalls == true && stone >= 10 && sap >= 5){
								stone -= 10;
								sap -= 5;
								UWallsB = true;
								HobleheadActive = true;
								HobleheadBuildingUWalls = true;
								UWalls = false;
								UWallsDays = 7;
								if (Hoblehead.getBuilding() <= 4){
									TownBoardDays = TownBoardDays/1;
								}else if (Hoblehead.getBuilding() <= 7 && Hoblehead.getBuilding() > 4){
									TownBoardDays = TownBoardDays/2;
								}else if (Hoblehead.getBuilding() > 7){
									TownBoardDays = TownBoardDays/3;
								}
								DayChoice = false;
								Hoblehead.setMdays(0);
							}
							if (answer.equals("townboard") && TownBoard == true && wood >= 5 && sap >= 5 && stone >= 5){
								wood -= 5;
								stone -= 5;
								sap -= 5;
								TownBoardB = true;
								HobleheadActive = true;
								HobleheadBuildingTownBoard = true;
								TownBoard = false;
								TownBoardDays = 5;
								if (Hoblehead.getBuilding() <= 4){
									TownBoardDays = TownBoardDays/1;
								}else if (Hoblehead.getBuilding() <= 7 && Hoblehead.getBuilding() > 4){
									TownBoardDays = TownBoardDays/2;
								}else if (Hoblehead.getBuilding() > 7){
									TownBoardDays = TownBoardDays/3;
								}
								DayChoice = false;
								Hoblehead.setMdays(0);
							}
							if  (answer.equals("walls") && Walls == true && wood >= 10 && sap >= 5){
								wood -= 10;
								sap -= 5;
								WallsB = true;
								HobleheadActive = true;
								HobleheadBuildingWalls = true;
								Walls = false;
								WallsDays = 7;
								if (Hoblehead.getBuilding() <= 4){
									WallsDays = WallsDays/1;
								}else if (Hoblehead.getBuilding() <= 7 && Hoblehead.getBuilding() > 4){
									WallsDays = WallsDays/2;
								}else if (Hoblehead.getBuilding() > 7){
									WallsDays = WallsDays/3;
								}
								DayChoice = false;
								Hoblehead.setMdays(0);
							}
							if (answer.equals("townhall") && TownHall == true && wood >= 20 && sap >= 5 && stone >= 10){
								stone -= 10;
								sap -= 5;
								wood -= 20;
								TownHallB = true;
								HobleheadActive = true;
								HobleheadBuildingTownHall = true;
								TownHall = false;
								TownHallDays = 16;
								if (Hoblehead.getBuilding() <= 4){
									TownHallDays = TownHallDays/1;
								}else if (Hoblehead.getBuilding() <= 7 && Hoblehead.getBuilding() > 4){
									TownHallDays = TownHallDays/2;
								}else if (Hoblehead.getBuilding() > 7){
									TownHallDays = TownHallDays/3;
								}
								DayChoice = false;
								Hoblehead.setMdays(0);
							}
							if (answer.equals("granary") && Granary == true && stone >= 15 && sap >= 15){
								System.out.println("you start building your Granary");
								stone -= 15;
								sap -= 15;
								GranaryB = true;
								HobleheadActive = true;
								HobleheadBuildingGranary = true;
								Granary = false;
								GranaryDays = 12;
								if (Hoblehead.getBuilding() <= 4){
									GranaryDays = GranaryDays/1;
								}else if (Hoblehead.getBuilding() <= 7 && Hoblehead.getBuilding() > 4){
									GranaryDays = GranaryDays/2;
								}else if (Hoblehead.getBuilding() > 7){
									GranaryDays = GranaryDays/3;
								}
								DayChoice = false;
								Hoblehead.setMdays(0);
							}
							if (answer.equals("tavern") && Tavern == true && wood >= 15 && stone >= 10 && food >= 5){
								System.out.println("You start building your Tavern");
								wood -= 15;
								stone -= 10;
								TavernB = true;
								HobleheadActive = true;
								HobleheadBuildingTavern = true;
								Tavern = false;
								TavernDays = 15;
								if (Hoblehead.getBuilding() <= 4){
									TavernDays = TavernDays/1;
								}else if (Hoblehead.getBuilding() <= 7 && Hoblehead.getBuilding() > 4){
									TavernDays = TavernDays/2;
								}else if (Hoblehead.getBuilding() > 7){
									TavernDays = TavernDays/3;
								}
								DayChoice = false;
								Hoblehead.setMdays(0);
							}
							if (answer.equals("towncenter") && TownCenter == true && wood > 9 && sap > 4){
								System.out.println("You start building your TownCenter");
								wood -= 10;
								sap -= 5;
								TownCenterB = true;
								HobleheadActive = true;
								HobleheadBuildingTownCenter = true;
								Hoblehead.setMdays(0);
								TownCenter = false;
								TownCenterDays = 5;
								if (Hoblehead.getBuilding() <= 4){
									TownCenterDays = TownCenterDays/1;
								}else if (Hoblehead.getBuilding() <= 7 && Hoblehead.getBuilding() > 4){
									TownCenterDays = TownCenterDays/2;
								}else if (Hoblehead.getBuilding() > 7){
									TownCenterDays = TownCenterDays/3;
								}
								DayChoice = false;
							}
							if (answer.equals("smith") && Smith == true && stone >= 15 && sap >= 5){
								System.out.println("You start building your smith");
								stone -= 15;
								sap -= 5;
								SmithB = true;
								HobleheadActive = true;
								HobleheadBuildingSmith = true;
								Smith = false;
								Hoblehead.setMdays(0);
								SmithDays = 9;
								if (Hoblehead.getBuilding() <= 4){
									SmithDays = SmithDays/1;
								}else if (Hoblehead.getBuilding() <= 7 && Hoblehead.getBuilding() > 4){
									SmithDays = SmithDays/2;
								}else if (Hoblehead.getBuilding() > 7){
									SmithDays = SmithDays/3;
								}
								DayChoice = false;
							}
							if (answer.equals("upgradedfarm") && UFarm == true && wood >= 10 && sap >= 10 && food >= 10){
								System.out.println("You start building your UpgradedFarm");
								food -= 10;
								wood -= 10;
								sap -= 10;
								UFarmB = true;
								HobleheadActive = true;
								HobleheadBuildingUFarm = true;
								UFarm = false;
								UFarmDays = 12;
								if (Hoblehead.getBuilding() <= 4){
									UFarmDays = UFarmDays/1;
								}else if (Hoblehead.getBuilding() <= 7 && Hoblehead.getBuilding() > 4){
									UFarmDays = UFarmDays/2;
								}else if (Hoblehead.getBuilding() > 7){
									UFarmDays = UFarmDays/3;
								}
								DayChoice = false;
								Hoblehead.setMdays(0);
							}
							if (answer.equals("farm") && Farm == true && food >= 5 && stone >= 5){
								System.out.println("You start building a farm");
								food -= 5;
								stone -= 5;
								FarmB = true;
								HobleheadBuildingFarm = true;
								HobleheadActive = true;
								Farm = false;
								Hoblehead.setMdays(0);
								FarmDays = 6;
								if (Hoblehead.getBuilding() <= 4){
									FarmDays = FarmDays/1;
								}else if (Hoblehead.getBuilding() <= 7 && Hoblehead.getBuilding() > 4){
									FarmDays = FarmDays/2;
								}else if (Hoblehead.getBuilding() > 7){
									FarmDays = FarmDays/3;
								}
								DayChoice = false;
							}
							if (answer.equals("habitat") && Habitat == true && wood >= 5 && stone >= 5 && sap >= 5){
								System.out.println("You start building a habitat");
								wood -= 5;
								stone -= 5;
								sap -= 5;
								HobleheadBuildingHabitat = true;
								HabitatB = true;
								HobleheadActive = true;
								Habitat = false;
								Hoblehead.setMdays(0);
								HabitatDays = 9;
								if (Hoblehead.getBuilding() <= 4){
									HabitatDays = HabitatDays/1;
								}else if (Hoblehead.getBuilding() <= 7 && Hoblehead.getBuilding() > 4){
									HabitatDays = HabitatDays/2;
								}else if (Hoblehead.getBuilding() > 7){
									HabitatDays = HabitatDays/3;
								}
								DayChoice = false;
							}
						}
						//------------------------------BUILDING FINISHED-----------------------
						//-----------------------------FOOD-------------------------------------
						if (answer.equals("startfood") && HobleheadActive == false){
							Hoblehead.setMdays(0);
							HobleheadFood = true;

							HobleheadActive = true;
							DayChoice = false;

						}else if (answer.equals("recall") && HobleheadActive == true && HobleheadFood == true){
							resources = Hoblehead.CreatureMission(Hoblehead.getHunting(), Hoblehead.getMdays());

							HobleheadFood = false;
							Cfood = resources;
							DayChoice = false;
							HobleheadActive = false;
						}
						//--------------------------------FOOD END------------------------------

						//---------------------------------STONE--------------------------------
						else if (answer.equals("startstone") && HobleheadActive == false){
							Hoblehead.setMdays(0);
							HobleheadStone = true;

							HobleheadActive = true;
							DayChoice = false;

						}else if (answer.equals("recall") && HobleheadActive == true && HobleheadStone == true){
							resources = Hoblehead.CreatureMission(Hoblehead.getMining(), Hoblehead.getMdays());

							HobleheadStone = false;
							Cstone = resources;
							DayChoice = false;
							HobleheadActive = false;
						}
						//-------------------------------STONE END------------------------------

						//---------------------------------WOOD---------------------------------
						else if (answer.equals("startwood") && HobleheadActive == false){
							Hoblehead.setMdays(0);
							HobleheadWood = true;

							HobleheadActive = true;
							DayChoice = false;

						}else if (answer.equals("recall") && HobleheadActive == true && HobleheadWood == true){
							resources = Hoblehead.CreatureMission(Hoblehead.getCutting(), Hoblehead.getMdays());

							HobleheadWood = false;
							Cwood = resources;
							DayChoice = false;
							HobleheadActive = false;
						}
						//--------------------------------WOOD END------------------------------

						//----------------------------------SAP---------------------------------
						else if (answer.equals("startsap") && HobleheadActive == false){
							Hoblehead.setMdays(0);
							HobleheadSap = true;

							HobleheadActive = true;
							DayChoice = false;

						}else if (answer.equals("recall") && HobleheadActive == true && HobleheadSap == true){
							resources = Hoblehead.CreatureMission(Hoblehead.getScollecting(), Hoblehead.getMdays());

							HobleheadSap = false;
							Csap = resources;
							DayChoice = false;
							HobleheadActive = false;
						}
						//---------------------------------SAP END------------------------------
					}else if (answer.equals("Hoblehead") && CreatureHoblehead == false){
						System.out.println("You dont have a Hoblehead... how did u get here?");
					}
					//-------------------------------------HOBLEHEAD END---------------------------

					//------------------------------BASILISK START------------------------------
					if (answer.equals("basilisk") && CreatureBasilisk == true){
						System.out.println("what would you like to do with the Basilisk?");
						System.out.println("You can say 'start(insert what resource you want to get)' or 'defend' or 'build'");
						System.out.println("If you want to recall a to reap your resources say 'recall' (Creature must be active)");
						answer = choice.next();

						if (answer.equals("stats")){
							System.out.println("Hunting: " + Basilisk.getHunting());
							System.out.println("Sap Collecting: " + Basilisk.getScollecting());
							System.out.println("Mining: " + Basilisk.getMining());
							System.out.println("Cutting (wood): " + Basilisk.getCutting());
							System.out.println("Defending: " + Basilisk.getDefending());
							System.out.println("Building: " + Basilisk.getBuilding());
							answer = choice.next();
						}
						//------------------------------DEFENDING-------------------------------
						if (answer.equals("defend") && BasiliskActive == false){
							System.out.println("Your Basilisk starts defending the camp");
							if (Basilisk.getDefending() < 3){
								defense += 1;
								BasiliskDefense = 1;
							}else if (Basilisk.getDefending() > 3 && Basilisk.getDefending() < 7){
								defense += 2;
								BasiliskDefense = 2;
							}else{
								defense += 3;
								BasiliskDefense = 3;
							}
							BasiliskDefend = true;
							BasiliskActive = true;
							DayChoice = false;
						}
						if (answer.equals("recall") && BasiliskDefend == true && BasiliskActive == true){
							defense = defense - BasiliskDefense;
							BasiliskDefense = 0;
							BasiliskActive = false;
							DayChoice = false;
						}
						//-----------------------------DEFENDING END----------------------------
						//------------------------------BUILDING--------------------------------

						if (answer.equals("build") && BasiliskActive == false){
							System.out.println("Here is what you can build");
							if (UWalls == true){
								System.out.println("UpgradedWalls");
								System.out.println("days: 7");
								System.out.println("stone: 10");
								System.out.println("sap: 5");
								System.out.println("");
							}
							if (Walls == true){
								System.out.println("Walls");
								System.out.println("days: 7");
								System.out.println("wood: 10");
								System.out.println("sap: 5");
								System.out.println("");
							}
							if (TownBoard == true){
								System.out.println("TownBoard");
								System.out.println("days: 5");
								System.out.println("wood: 5");
								System.out.println("stone: 5");
								System.out.println("sap: 5");
								System.out.println("");
							}
							if (TownHall == true){
								System.out.println("TownHall");
								System.out.println("days: 16");
								System.out.println("wood: 20");
								System.out.println("stone: 10");
								System.out.println("sap: 5");
								System.out.println("");
							}
							if (Granary == true){
								System.out.println("Granary");
								System.out.println("Days: 12");
								System.out.println("Sap: 15");
								System.out.println("Stone: 15");
								System.out.println("");
							}
							if (Tavern == true){
								System.out.println("Tavern");
								System.out.println("days: 15");
								System.out.println("wood: 15");
								System.out.println("stone: 10");
								System.out.println("food: 5");
								System.out.println("");
							}
							if (Smith == true){
								System.out.println("Smith");
								System.out.println("days: 9");
								System.out.println("stone: 15");
								System.out.println("sap: 5");
								System.out.println("");
							}
							if (UFarm == true){
								System.out.println("UpgradedFarm");
								System.out.println("days: 12");
								System.out.println("wood: 10");
								System.out.println("food: 5");
								System.out.println("sap: 10");
								System.out.println("");
							}
							if (TownCenter == true){
								System.out.println("TownCenter");
								System.out.println("days: 5");
								System.out.println("wood: 10");
								System.out.println("sap: 5");
								System.out.println("");
							}
							if (Farm == true){
								System.out.println("Farm");
								System.out.println("days: 6");
								System.out.println("food: 5");
								System.out.println("stone: 5");
								System.out.println("");
							}
							if (Habitat == true){
								System.out.println("Habitat");
								System.out.println("days: 10");
								System.out.println("wood: 5");
								System.out.println("sap: 5");
								System.out.println("stone: 5");
								System.out.println("");
							}

							else if (answer.equals("build") && BasiliskActive == true){
								System.out.println("The Basilisk is busy (on a mission or building something)");
							}


							System.out.println("What, of those, would you like to build? (Remember, dont use any caps!)");
							System.out.println("If you need to see your resources say resources");
							answer = choice.next();

							if (answer.equals("resources") || answer.equals("Resources") || answer.equals("Stats") || answer.equals("stats")){
								System.out.println("Stone is: " + stone);
								System.out.println("Wood is: " + wood);
								System.out.println("Sap is: " + sap);
								System.out.println("Food is: " + food);
								System.out.println("FoodUse is: " + FoodUse);
								answer = choice.next();
							}
							if (answer.equals("back") || answer.equals("Back")){
								back = true;
							}
							if (answer.equals("upgradedwalls") && UWalls == true && stone >= 10 && sap >= 5){
								stone -= 10;
								sap -= 5;
								UWallsB = true;
								BasiliskActive = true;
								BasiliskBuildingUWalls = true;
								UWalls = false;
								UWallsDays = 7;
								if (Basilisk.getBuilding() <= 4){
									TownBoardDays = TownBoardDays/1;
								}else if (Basilisk.getBuilding() <= 7 && Basilisk.getBuilding() > 4){
									TownBoardDays = TownBoardDays/2;
								}else if (Basilisk.getBuilding() > 7){
									TownBoardDays = TownBoardDays/3;
								}
								DayChoice = false;
								Basilisk.setMdays(0);
							}
							if (answer.equals("townboard") && TownBoard == true && wood >= 5 && sap >= 5 && stone >= 5){
								wood -= 5;
								stone -= 5;
								sap -= 5;
								TownBoardB = true;
								BasiliskActive = true;
								BasiliskBuildingTownBoard = true;
								TownBoard = false;
								TownBoardDays = 5;
								if (Basilisk.getBuilding() <= 4){
									TownBoardDays = TownBoardDays/1;
								}else if (Basilisk.getBuilding() <= 7 && Basilisk.getBuilding() > 4){
									TownBoardDays = TownBoardDays/2;
								}else if (Basilisk.getBuilding() > 7){
									TownBoardDays = TownBoardDays/3;
								}
								DayChoice = false;
								Basilisk.setMdays(0);
							}
							if  (answer.equals("walls") && Walls == true && wood >= 10 && sap >= 5){
								wood -= 10;
								sap -= 5;
								WallsB = true;
								BasiliskActive = true;
								BasiliskBuildingWalls = true;
								Walls = false;
								WallsDays = 7;
								if (Basilisk.getBuilding() <= 4){
									WallsDays = WallsDays/1;
								}else if (Basilisk.getBuilding() <= 7 && Basilisk.getBuilding() > 4){
									WallsDays = WallsDays/2;
								}else if (Basilisk.getBuilding() > 7){
									WallsDays = WallsDays/3;
								}
								DayChoice = false;
								Basilisk.setMdays(0);
							}
							if (answer.equals("townhall") && TownHall == true && wood >= 20 && sap >= 5 && stone >= 10){
								stone -= 10;
								sap -= 5;
								wood -= 20;
								TownHallB = true;
								BasiliskActive = true;
								BasiliskBuildingTownHall = true;
								TownHall = false;
								TownHallDays = 16;
								if (Basilisk.getBuilding() <= 4){
									TownHallDays = TownHallDays/1;
								}else if (Basilisk.getBuilding() <= 7 && Basilisk.getBuilding() > 4){
									TownHallDays = TownHallDays/2;
								}else if (Basilisk.getBuilding() > 7){
									TownHallDays = TownHallDays/3;
								}
								DayChoice = false;
								Basilisk.setMdays(0);
							}
							if (answer.equals("granary") && Granary == true && stone >= 15 && sap >= 15){
								System.out.println("you start building your Granary");
								stone -= 15;
								sap -= 15;
								GranaryB = true;
								BasiliskActive = true;
								BasiliskBuildingGranary = true;
								Granary = false;
								GranaryDays = 12;
								if (Basilisk.getBuilding() <= 4){
									GranaryDays = GranaryDays/1;
								}else if (Basilisk.getBuilding() <= 7 && Basilisk.getBuilding() > 4){
									GranaryDays = GranaryDays/2;
								}else if (Basilisk.getBuilding() > 7){
									GranaryDays = GranaryDays/3;
								}
								DayChoice = false;
								Basilisk.setMdays(0);
							}
							if (answer.equals("tavern") && Tavern == true && wood >= 15 && stone >= 10 && food >= 5){
								System.out.println("You start building your Tavern");
								wood -= 15;
								stone -= 10;
								TavernB = true;
								BasiliskActive = true;
								BasiliskBuildingTavern = true;
								Tavern = false;
								TavernDays = 15;
								if (Basilisk.getBuilding() <= 4){
									TavernDays = TavernDays/1;
								}else if (Basilisk.getBuilding() <= 7 && Basilisk.getBuilding() > 4){
									TavernDays = TavernDays/2;
								}else if (Basilisk.getBuilding() > 7){
									TavernDays = TavernDays/3;
								}
								DayChoice = false;
								Basilisk.setMdays(0);
							}
							if (answer.equals("towncenter") && TownCenter == true && wood > 9 && sap > 4){
								System.out.println("You start building your TownCenter");
								wood -= 10;
								sap -= 5;
								TownCenterB = true;
								BasiliskActive = true;
								BasiliskBuildingTownCenter = true;
								Basilisk.setMdays(0);
								TownCenter = false;
								TownCenterDays = 5;
								if (Basilisk.getBuilding() <= 4){
									TownCenterDays = TownCenterDays/1;
								}else if (Basilisk.getBuilding() <= 7 && Basilisk.getBuilding() > 4){
									TownCenterDays = TownCenterDays/2;
								}else if (Basilisk.getBuilding() > 7){
									TownCenterDays = TownCenterDays/3;
								}
								DayChoice = false;
							}
							if (answer.equals("smith") && Smith == true && stone >= 15 && sap >= 5){
								System.out.println("You start building your smith");
								stone -= 15;
								sap -= 5;
								SmithB = true;
								BasiliskActive = true;
								BasiliskBuildingSmith = true;
								Smith = false;
								Basilisk.setMdays(0);
								SmithDays = 9;
								if (Basilisk.getBuilding() <= 4){
									SmithDays = SmithDays/1;
								}else if (Basilisk.getBuilding() <= 7 && Basilisk.getBuilding() > 4){
									SmithDays = SmithDays/2;
								}else if (Basilisk.getBuilding() > 7){
									SmithDays = SmithDays/3;
								}
								DayChoice = false;
							}
							if (answer.equals("upgradedfarm") && UFarm == true && wood >= 10 && sap >= 10 && food >= 10){
								System.out.println("You start building your UpgradedFarm");
								food -= 10;
								wood -= 10;
								sap -= 10;
								UFarmB = true;
								BasiliskActive = true;
								BasiliskBuildingUFarm = true;
								UFarm = false;
								UFarmDays = 12;
								if (Basilisk.getBuilding() <= 4){
									UFarmDays = UFarmDays/1;
								}else if (Basilisk.getBuilding() <= 7 && Basilisk.getBuilding() > 4){
									UFarmDays = UFarmDays/2;
								}else if (Basilisk.getBuilding() > 7){
									UFarmDays = UFarmDays/3;
								}
								DayChoice = false;
								Basilisk.setMdays(0);
							}
							if (answer.equals("farm") && Farm == true && food >= 5 && stone >= 5){
								System.out.println("You start building a farm");
								food -= 5;
								stone -= 5;
								FarmB = true;
								BasiliskBuildingFarm = true;
								BasiliskActive = true;
								Farm = false;
								Basilisk.setMdays(0);
								FarmDays = 6;
								if (Basilisk.getBuilding() <= 4){
									FarmDays = FarmDays/1;
								}else if (Basilisk.getBuilding() <= 7 && Basilisk.getBuilding() > 4){
									FarmDays = FarmDays/2;
								}else if (Basilisk.getBuilding() > 7){
									FarmDays = FarmDays/3;
								}
								DayChoice = false;
							}
							if (answer.equals("habitat") && Habitat == true && wood >= 5 && stone >= 5 && sap >= 5){
								System.out.println("You start building a habitat");
								wood -= 5;
								stone -= 5;
								sap -= 5;
								BasiliskBuildingHabitat = true;
								HabitatB = true;
								BasiliskActive = true;
								Habitat = false;
								Basilisk.setMdays(0);
								HabitatDays = 9;
								if (Basilisk.getBuilding() <= 4){
									HabitatDays = HabitatDays/1;
								}else if (Basilisk.getBuilding() <= 7 && Basilisk.getBuilding() > 4){
									HabitatDays = HabitatDays/2;
								}else if (Basilisk.getBuilding() > 7){
									HabitatDays = HabitatDays/3;
								}
								DayChoice = false;
							}
						}
						//------------------------------BUILDING FINISHED-----------------------
						//-----------------------------FOOD-------------------------------------
						if (answer.equals("startfood") && BasiliskActive == false){
							Basilisk.setMdays(0);
							BasiliskFood = true;

							BasiliskActive = true;
							DayChoice = false;

						}else if (answer.equals("recall") && BasiliskActive == true && BasiliskFood == true){
							resources = Basilisk.CreatureMission(Basilisk.getHunting(), Basilisk.getMdays());

							BasiliskFood = false;
							Cfood = resources;
							DayChoice = false;
							BasiliskActive = false;
						}
						//--------------------------------FOOD END------------------------------

						//---------------------------------STONE--------------------------------
						else if (answer.equals("startstone") && BasiliskActive == false){
							Basilisk.setMdays(0);
							BasiliskStone = true;

							BasiliskActive = true;
							DayChoice = false;

						}else if (answer.equals("recall") && BasiliskActive == true && BasiliskStone == true){
							resources = Basilisk.CreatureMission(Basilisk.getMining(), Basilisk.getMdays());

							BasiliskStone = false;
							Cstone = resources;
							DayChoice = false;
							BasiliskActive = false;
						}
						//-------------------------------STONE END------------------------------

						//---------------------------------WOOD---------------------------------
						else if (answer.equals("startwood") && BasiliskActive == false){
							Basilisk.setMdays(0);
							BasiliskWood = true;

							BasiliskActive = true;
							DayChoice = false;

						}else if (answer.equals("recall") && BasiliskActive == true && BasiliskWood == true){
							resources = Basilisk.CreatureMission(Basilisk.getCutting(), Basilisk.getMdays());

							BasiliskWood = false;
							Cwood = resources;
							DayChoice = false;
							BasiliskActive = false;
						}
						//--------------------------------WOOD END------------------------------

						//----------------------------------SAP---------------------------------
						else if (answer.equals("startsap") && BasiliskActive == false){
							Basilisk.setMdays(0);
							BasiliskSap = true;

							BasiliskActive = true;
							DayChoice = false;

						}else if (answer.equals("recall") && BasiliskActive == true && BasiliskSap == true){
							resources = Basilisk.CreatureMission(Basilisk.getScollecting(), Basilisk.getMdays());

							BasiliskSap = false;
							Csap = resources;
							DayChoice = false;
							BasiliskActive = false;
						}
						//---------------------------------SAP END------------------------------
					}else if (answer.equals("basilisk") && CreatureBasilisk == false){
						System.out.println("You dont have a Basilisk... how did u get here?");
					}
					//-------------------------------------BASILISK END---------------------------
					//---------------------------------DUCK START-------------------------------------
					if (answer.equals("duck") && CreatureDuck == true || answer.equals("dug") && CreatureDuck == true){
						System.out.println("what would you like to do with the Duck?");
						System.out.println("You can say 'start(insert what resource you want to get)' or 'defend' or 'build'");
						System.out.println("If you want to recall a to reap your resources say 'recall' (Creature must be active)");
						answer = choice.next();

						if (answer.equals("stats")){
							System.out.println("Hunting: " + Duck.getHunting());
							System.out.println("Sap Collecting: " + Duck.getScollecting());
							System.out.println("Mining: " + Duck.getMining());
							System.out.println("Cutting (wood): " + Duck.getCutting());
							System.out.println("Defending: " + Duck.getDefending());
							System.out.println("Building: " + Duck.getBuilding());
							answer = choice.next();
						}
						//------------------------------DEFENDING-------------------------------
						if (answer.equals("defend") && DuckActive == false){
							System.out.println("Your Duck starts defending the camp");
							if (Duck.getDefending() < 3){
								defense += 1;
								DuckDefense = 1;
							}else if (Duck.getDefending() > 3 && Duck.getDefending() < 7){
								defense += 2;
								DuckDefense = 2;
							}else{
								defense += 3;
								DuckDefense = 3;
							}
							DuckDefend = true;
							DuckActive = true;
							DayChoice = false;
						}
						if (answer.equals("recall") && DuckDefend == true && DuckActive == true){
							defense = defense - DuckDefense;
							DuckDefense = 0;
							DuckActive = false;
							DayChoice = false;
						}
						//-----------------------------DEFENDING END----------------------------
						//------------------------------BUILDING--------------------------------

						if (answer.equals("build") && DuckActive == false){
							System.out.println("Here is what you can build");
							if (UWalls == true){
								System.out.println("UpgradedWalls");
								System.out.println("days: 7");
								System.out.println("stone: 10");
								System.out.println("sap: 5");
								System.out.println("");
							}
							if (Walls == true){
								System.out.println("Walls");
								System.out.println("days: 7");
								System.out.println("wood: 10");
								System.out.println("sap: 5");
								System.out.println("");
							}
							if (TownBoard == true){
								System.out.println("TownBoard");
								System.out.println("days: 5");
								System.out.println("wood: 5");
								System.out.println("stone: 5");
								System.out.println("sap: 5");
								System.out.println("");
							}
							if (TownHall == true){
								System.out.println("TownHall");
								System.out.println("days: 16");
								System.out.println("wood: 20");
								System.out.println("stone: 10");
								System.out.println("sap: 5");
								System.out.println("");
							}
							if (Granary == true){
								System.out.println("Granary");
								System.out.println("Days: 12");
								System.out.println("Sap: 15");
								System.out.println("Stone: 15");
								System.out.println("");
							}
							if (Tavern == true){
								System.out.println("Tavern");
								System.out.println("days: 15");
								System.out.println("wood: 15");
								System.out.println("stone: 10");
								System.out.println("food: 5");
								System.out.println("");
							}
							if (Smith == true){
								System.out.println("Smith");
								System.out.println("days: 9");
								System.out.println("stone: 15");
								System.out.println("sap: 5");
								System.out.println("");
							}
							if (UFarm == true){
								System.out.println("UpgradedFarm");
								System.out.println("days: 12");
								System.out.println("wood: 10");
								System.out.println("food: 5");
								System.out.println("sap: 10");
								System.out.println("");
							}
							if (TownCenter == true){
								System.out.println("TownCenter");
								System.out.println("days: 5");
								System.out.println("wood: 10");
								System.out.println("sap: 5");
								System.out.println("");
							}
							if (Farm == true){
								System.out.println("Farm");
								System.out.println("days: 6");
								System.out.println("food: 5");
								System.out.println("stone: 5");
								System.out.println("");
							}
							if (Habitat == true){
								System.out.println("Habitat");
								System.out.println("days: 10");
								System.out.println("wood: 5");
								System.out.println("sap: 5");
								System.out.println("stone: 5");
								System.out.println("");
							}

							else if (answer.equals("build") && DuckActive == true){
								System.out.println("The Duck is busy (on a mission or building something)");
							}


							System.out.println("What, of those, would you like to build? (Remember, dont use any caps!)");
							System.out.println("If you need to see your resources say resources");
							answer = choice.next();

							if (answer.equals("resources") || answer.equals("Resources") || answer.equals("Stats") || answer.equals("stats")){
								System.out.println("Stone is: " + stone);
								System.out.println("Wood is: " + wood);
								System.out.println("Sap is: " + sap);
								System.out.println("Food is: " + food);
								System.out.println("FoodUse is: " + FoodUse);
								answer = choice.next();
							}
							if (answer.equals("back") || answer.equals("Back")){
								back = true;
							}
							if (answer.equals("upgradedwalls") && UWalls == true && stone >= 10 && sap >= 5){
								stone -= 10;
								sap -= 5;
								UWallsB = true;
								DuckActive = true;
								DuckBuildingUWalls = true;
								UWalls = false;
								UWallsDays = 7;
								if (Duck.getBuilding() <= 4){
									TownBoardDays = TownBoardDays/1;
								}else if (Duck.getBuilding() <= 7 && Duck.getBuilding() > 4){
									TownBoardDays = TownBoardDays/2;
								}else if (Duck.getBuilding() > 7){
									TownBoardDays = TownBoardDays/3;
								}
								DayChoice = false;
								Duck.setMdays(0);
							}
							if (answer.equals("townboard") && TownBoard == true && wood >= 5 && sap >= 5 && stone >= 5){
								wood -= 5;
								stone -= 5;
								sap -= 5;
								TownBoardB = true;
								DuckActive = true;
								DuckBuildingTownBoard = true;
								TownBoard = false;
								TownBoardDays = 5;
								if (Duck.getBuilding() <= 4){
									TownBoardDays = TownBoardDays/1;
								}else if (Duck.getBuilding() <= 7 && Duck.getBuilding() > 4){
									TownBoardDays = TownBoardDays/2;
								}else if (Duck.getBuilding() > 7){
									TownBoardDays = TownBoardDays/3;
								}
								DayChoice = false;
								Duck.setMdays(0);
							}
							if  (answer.equals("walls") && Walls == true && wood >= 10 && sap >= 5){
								wood -= 10;
								sap -= 5;
								WallsB = true;
								DuckActive = true;
								DuckBuildingWalls = true;
								Walls = false;
								WallsDays = 7;
								if (Duck.getBuilding() <= 4){
									WallsDays = WallsDays/1;
								}else if (Duck.getBuilding() <= 7 && Duck.getBuilding() > 4){
									WallsDays = WallsDays/2;
								}else if (Duck.getBuilding() > 7){
									WallsDays = WallsDays/3;
								}
								DayChoice = false;
								Duck.setMdays(0);
							}
							if (answer.equals("townhall") && TownHall == true && wood >= 20 && sap >= 5 && stone >= 10){
								stone -= 10;
								sap -= 5;
								wood -= 20;
								TownHallB = true;
								DuckActive = true;
								DuckBuildingTownHall = true;
								TownHall = false;
								TownHallDays = 16;
								if (Duck.getBuilding() <= 4){
									TownHallDays = TownHallDays/1;
								}else if (Duck.getBuilding() <= 7 && Duck.getBuilding() > 4){
									TownHallDays = TownHallDays/2;
								}else if (Duck.getBuilding() > 7){
									TownHallDays = TownHallDays/3;
								}
								DayChoice = false;
								Duck.setMdays(0);
							}
							if (answer.equals("granary") && Granary == true && stone >= 15 && sap >= 15){
								System.out.println("you start building your Granary");
								stone -= 15;
								sap -= 15;
								GranaryB = true;
								DuckActive = true;
								DuckBuildingGranary = true;
								Granary = false;
								GranaryDays = 12;
								if (Duck.getBuilding() <= 4){
									GranaryDays = GranaryDays/1;
								}else if (Duck.getBuilding() <= 7 && Duck.getBuilding() > 4){
									GranaryDays = GranaryDays/2;
								}else if (Duck.getBuilding() > 7){
									GranaryDays = GranaryDays/3;
								}
								DayChoice = false;
								Duck.setMdays(0);
							}
							if (answer.equals("tavern") && Tavern == true && wood >= 15 && stone >= 10 && food >= 5){
								System.out.println("You start building your Tavern");
								wood -= 15;
								stone -= 10;
								TavernB = true;
								DuckActive = true;
								DuckBuildingTavern = true;
								Tavern = false;
								TavernDays = 15;
								if (Duck.getBuilding() <= 4){
									TavernDays = TavernDays/1;
								}else if (Duck.getBuilding() <= 7 && Duck.getBuilding() > 4){
									TavernDays = TavernDays/2;
								}else if (Duck.getBuilding() > 7){
									TavernDays = TavernDays/3;
								}
								DayChoice = false;
								Duck.setMdays(0);
							}
							if (answer.equals("towncenter") && TownCenter == true && wood > 9 && sap > 4){
								System.out.println("You start building your TownCenter");
								wood -= 10;
								sap -= 5;
								TownCenterB = true;
								DuckActive = true;
								DuckBuildingTownCenter = true;
								Duck.setMdays(0);
								TownCenter = false;
								TownCenterDays = 5;
								if (Duck.getBuilding() <= 4){
									TownCenterDays = TownCenterDays/1;
								}else if (Duck.getBuilding() <= 7 && Duck.getBuilding() > 4){
									TownCenterDays = TownCenterDays/2;
								}else if (Duck.getBuilding() > 7){
									TownCenterDays = TownCenterDays/3;
								}
								DayChoice = false;
							}
							if (answer.equals("smith") && Smith == true && stone >= 15 && sap >= 5){
								System.out.println("You start building your smith");
								stone -= 15;
								sap -= 5;
								SmithB = true;
								DuckActive = true;
								DuckBuildingSmith = true;
								Smith = false;
								Duck.setMdays(0);
								SmithDays = 9;
								if (Duck.getBuilding() <= 4){
									SmithDays = SmithDays/1;
								}else if (Duck.getBuilding() <= 7 && Duck.getBuilding() > 4){
									SmithDays = SmithDays/2;
								}else if (Duck.getBuilding() > 7){
									SmithDays = SmithDays/3;
								}
								DayChoice = false;
							}
							if (answer.equals("upgradedfarm") && UFarm == true && wood >= 10 && sap >= 10 && food >= 10){
								System.out.println("You start building your UpgradedFarm");
								food -= 10;
								wood -= 10;
								sap -= 10;
								UFarmB = true;
								DuckActive = true;
								DuckBuildingUFarm = true;
								UFarm = false;
								UFarmDays = 12;
								if (Duck.getBuilding() <= 4){
									UFarmDays = UFarmDays/1;
								}else if (Duck.getBuilding() <= 7 && Duck.getBuilding() > 4){
									UFarmDays = UFarmDays/2;
								}else if (Duck.getBuilding() > 7){
									UFarmDays = UFarmDays/3;
								}
								DayChoice = false;
								Duck.setMdays(0);
							}
							if (answer.equals("farm") && Farm == true && food >= 5 && stone >= 5){
								System.out.println("You start building a farm");
								food -= 5;
								stone -= 5;
								FarmB = true;
								DuckBuildingFarm = true;
								DuckActive = true;
								Farm = false;
								Duck.setMdays(0);
								FarmDays = 6;
								if (Duck.getBuilding() <= 4){
									FarmDays = FarmDays/1;
								}else if (Duck.getBuilding() <= 7 && Duck.getBuilding() > 4){
									FarmDays = FarmDays/2;
								}else if (Duck.getBuilding() > 7){
									FarmDays = FarmDays/3;
								}
								DayChoice = false;
							}
							if (answer.equals("habitat") && Habitat == true && wood >= 5 && stone >= 5 && sap >= 5){
								System.out.println("You start building a habitat");
								wood -= 5;
								stone -= 5;
								sap -= 5;
								DuckBuildingHabitat = true;
								HabitatB = true;
								DuckActive = true;
								Habitat = false;
								Duck.setMdays(0);
								HabitatDays = 9;
								if (Duck.getBuilding() <= 4){
									HabitatDays = HabitatDays/1;
								}else if (Duck.getBuilding() <= 7 && Duck.getBuilding() > 4){
									HabitatDays = HabitatDays/2;
								}else if (Duck.getBuilding() > 7){
									HabitatDays = HabitatDays/3;
								}
								DayChoice = false;
							}
						}
						//------------------------------BUILDING FINISHED-----------------------
						//-----------------------------FOOD-------------------------------------
						if (answer.equals("startfood") && DuckActive == false){
							Duck.setMdays(0);
							DuckFood = true;

							DuckActive = true;
							DayChoice = false;

						}else if (answer.equals("recall") && DuckActive == true && DuckFood == true){
							resources = Duck.CreatureMission(Duck.getHunting(), Duck.getMdays());

							DuckFood = false;
							Cfood = resources;
							DayChoice = false;
							DuckActive = false;
						}
						//--------------------------------FOOD END------------------------------

						//---------------------------------STONE--------------------------------
						else if (answer.equals("startstone") && DuckActive == false){
							Duck.setMdays(0);
							DuckStone = true;

							DuckActive = true;
							DayChoice = false;

						}else if (answer.equals("recall") && DuckActive == true && DuckStone == true){
							resources = Duck.CreatureMission(Duck.getMining(), Duck.getMdays());

							DuckStone = false;
							Cstone = resources;
							DayChoice = false;
							DuckActive = false;
						}
						//-------------------------------STONE END------------------------------

						//---------------------------------WOOD---------------------------------
						else if (answer.equals("startwood") && DuckActive == false){
							Duck.setMdays(0);
							DuckWood = true;

							DuckActive = true;
							DayChoice = false;

						}else if (answer.equals("recall") && DuckActive == true && DuckWood == true){
							resources = Duck.CreatureMission(Duck.getCutting(), Duck.getMdays());

							DuckWood = false;
							Cwood = resources;
							DayChoice = false;
							DuckActive = false;
						}
						//--------------------------------WOOD END------------------------------

						//----------------------------------SAP---------------------------------
						else if (answer.equals("startsap") && DuckActive == false){
							Duck.setMdays(0);
							DuckSap = true;

							DuckActive = true;
							DayChoice = false;

						}else if (answer.equals("recall") && DuckActive == true && DuckSap == true){
							resources = Duck.CreatureMission(Duck.getScollecting(), Duck.getMdays());

							DuckSap = false;
							Csap = resources;
							DayChoice = false;
							DuckActive = false;
						}
						//---------------------------------SAP END------------------------------
					}else if (answer.equals("Duck") && CreatureDuck == false){
						System.out.println("You dont have a Duck... how did u get here?");
					}
					//-------------------------------------DUCK END---------------------------
					//---------------------------------KNARL START-------------------------------------
					if (answer.equals("knarl") && CreatureKnarl == true){
						System.out.println("what would you like to do with the Knarl?");
						System.out.println("You can say 'start(insert what resource you want to get)' or 'defend' or 'build'");
						System.out.println("If you want to recall a to reap your resources say 'recall' (Creature must be active)");
						answer = choice.next();

						if (answer.equals("stats")){
							System.out.println("Hunting: " + Knarl.getHunting());
							System.out.println("Sap Collecting: " + Knarl.getScollecting());
							System.out.println("Mining: " + Knarl.getMining());
							System.out.println("Cutting (wood): " + Knarl.getCutting());
							System.out.println("Defending: " + Knarl.getDefending());
							System.out.println("Building: " + Knarl.getBuilding());
							answer = choice.next();
						}
						//------------------------------DEFENDING-------------------------------
						if (answer.equals("defend") && KnarlActive == false){
							System.out.println("Your Knarl starts defending the camp");
							if (Knarl.getDefending() < 3){
								defense += 1;
								KnarlDefense = 1;
							}else if (Knarl.getDefending() > 3 && Knarl.getDefending() < 7){
								defense += 2;
								KnarlDefense = 2;
							}else{
								defense += 3;
								KnarlDefense = 3;
							}
							KnarlDefend = true;
							KnarlActive = true;
							DayChoice = false;
						}
						if (answer.equals("recall") && KnarlDefend == true && KnarlActive == true){
							defense = defense - KnarlDefense;
							KnarlDefense = 0;
							KnarlActive = false;
							DayChoice = false;
						}
						//-----------------------------DEFENDING END----------------------------
						//------------------------------BUILDING--------------------------------

						if (answer.equals("build") && KnarlActive == false){
							System.out.println("Here is what you can build");
							if (UWalls == true){
								System.out.println("UpgradedWalls");
								System.out.println("days: 7");
								System.out.println("stone: 10");
								System.out.println("sap: 5");
								System.out.println("");
							}
							if (Walls == true){
								System.out.println("Walls");
								System.out.println("days: 7");
								System.out.println("wood: 10");
								System.out.println("sap: 5");
								System.out.println("");
							}
							if (TownBoard == true){
								System.out.println("TownBoard");
								System.out.println("days: 5");
								System.out.println("wood: 5");
								System.out.println("stone: 5");
								System.out.println("sap: 5");
								System.out.println("");
							}
							if (TownHall == true){
								System.out.println("TownHall");
								System.out.println("days: 16");
								System.out.println("wood: 20");
								System.out.println("stone: 10");
								System.out.println("sap: 5");
								System.out.println("");
							}
							if (Granary == true){
								System.out.println("Granary");
								System.out.println("Days: 12");
								System.out.println("Sap: 15");
								System.out.println("Stone: 15");
								System.out.println("");
							}
							if (Tavern == true){
								System.out.println("Tavern");
								System.out.println("days: 15");
								System.out.println("wood: 15");
								System.out.println("stone: 10");
								System.out.println("food: 5");
								System.out.println("");
							}
							if (Smith == true){
								System.out.println("Smith");
								System.out.println("days: 9");
								System.out.println("stone: 15");
								System.out.println("sap: 5");
								System.out.println("");
							}
							if (UFarm == true){
								System.out.println("UpgradedFarm");
								System.out.println("days: 12");
								System.out.println("wood: 10");
								System.out.println("food: 5");
								System.out.println("sap: 10");
								System.out.println("");
							}
							if (TownCenter == true){
								System.out.println("TownCenter");
								System.out.println("days: 5");
								System.out.println("wood: 10");
								System.out.println("sap: 5");
								System.out.println("");
							}
							if (Farm == true){
								System.out.println("Farm");
								System.out.println("days: 6");
								System.out.println("food: 5");
								System.out.println("stone: 5");
								System.out.println("");
							}
							if (Habitat == true){
								System.out.println("Habitat");
								System.out.println("days: 10");
								System.out.println("wood: 5");
								System.out.println("sap: 5");
								System.out.println("stone: 5");
								System.out.println("");
							}

							else if (answer.equals("build") && KnarlActive == true){
								System.out.println("The Knarl is busy (on a mission or building something)");
							}


							System.out.println("What, of those, would you like to build? (Remember, dont use any caps!)");
							System.out.println("If you need to see your resources say resources");
							answer = choice.next();

							if (answer.equals("resources") || answer.equals("Resources") || answer.equals("Stats") || answer.equals("stats")){
								System.out.println("Stone is: " + stone);
								System.out.println("Wood is: " + wood);
								System.out.println("Sap is: " + sap);
								System.out.println("Food is: " + food);
								System.out.println("FoodUse is: " + FoodUse);
								answer = choice.next();
							}
							if (answer.equals("back") || answer.equals("Back")){
								back = true;
							}
							if (answer.equals("upgradedwalls") && UWalls == true && stone >= 10 && sap >= 5){
								stone -= 10;
								sap -= 5;
								UWallsB = true;
								KnarlActive = true;
								KnarlBuildingUWalls = true;
								UWalls = false;
								UWallsDays = 7;
								if (Knarl.getBuilding() <= 4){
									TownBoardDays = TownBoardDays/1;
								}else if (Knarl.getBuilding() <= 7 && Knarl.getBuilding() > 4){
									TownBoardDays = TownBoardDays/2;
								}else if (Knarl.getBuilding() > 7){
									TownBoardDays = TownBoardDays/3;
								}
								DayChoice = false;
								Knarl.setMdays(0);
							}
							if (answer.equals("townboard") && TownBoard == true && wood >= 5 && sap >= 5 && stone >= 5){
								wood -= 5;
								stone -= 5;
								sap -= 5;
								TownBoardB = true;
								KnarlActive = true;
								KnarlBuildingTownBoard = true;
								TownBoard = false;
								TownBoardDays = 5;
								if (Knarl.getBuilding() <= 4){
									TownBoardDays = TownBoardDays/1;
								}else if (Knarl.getBuilding() <= 7 && Knarl.getBuilding() > 4){
									TownBoardDays = TownBoardDays/2;
								}else if (Knarl.getBuilding() > 7){
									TownBoardDays = TownBoardDays/3;
								}
								DayChoice = false;
								Knarl.setMdays(0);
							}
							if  (answer.equals("walls") && Walls == true && wood >= 10 && sap >= 5){
								wood -= 10;
								sap -= 5;
								WallsB = true;
								KnarlActive = true;
								KnarlBuildingWalls = true;
								Walls = false;
								WallsDays = 7;
								if (Knarl.getBuilding() <= 4){
									WallsDays = WallsDays/1;
								}else if (Knarl.getBuilding() <= 7 && Knarl.getBuilding() > 4){
									WallsDays = WallsDays/2;
								}else if (Knarl.getBuilding() > 7){
									WallsDays = WallsDays/3;
								}
								DayChoice = false;
								Knarl.setMdays(0);
							}
							if (answer.equals("townhall") && TownHall == true && wood >= 20 && sap >= 5 && stone >= 10){
								stone -= 10;
								sap -= 5;
								wood -= 20;
								TownHallB = true;
								KnarlActive = true;
								KnarlBuildingTownHall = true;
								TownHall = false;
								TownHallDays = 16;
								if (Knarl.getBuilding() <= 4){
									TownHallDays = TownHallDays/1;
								}else if (Knarl.getBuilding() <= 7 && Knarl.getBuilding() > 4){
									TownHallDays = TownHallDays/2;
								}else if (Knarl.getBuilding() > 7){
									TownHallDays = TownHallDays/3;
								}
								DayChoice = false;
								Knarl.setMdays(0);
							}
							if (answer.equals("granary") && Granary == true && stone >= 15 && sap >= 15){
								System.out.println("you start building your Granary");
								stone -= 15;
								sap -= 15;
								GranaryB = true;
								KnarlActive = true;
								KnarlBuildingGranary = true;
								Granary = false;
								GranaryDays = 12;
								if (Knarl.getBuilding() <= 4){
									GranaryDays = GranaryDays/1;
								}else if (Knarl.getBuilding() <= 7 && Knarl.getBuilding() > 4){
									GranaryDays = GranaryDays/2;
								}else if (Knarl.getBuilding() > 7){
									GranaryDays = GranaryDays/3;
								}
								DayChoice = false;
								Knarl.setMdays(0);
							}
							if (answer.equals("tavern") && Tavern == true && wood >= 15 && stone >= 10 && food >= 5){
								System.out.println("You start building your Tavern");
								wood -= 15;
								stone -= 10;
								TavernB = true;
								KnarlActive = true;
								KnarlBuildingTavern = true;
								Tavern = false;
								TavernDays = 15;
								if (Knarl.getBuilding() <= 4){
									TavernDays = TavernDays/1;
								}else if (Knarl.getBuilding() <= 7 && Knarl.getBuilding() > 4){
									TavernDays = TavernDays/2;
								}else if (Knarl.getBuilding() > 7){
									TavernDays = TavernDays/3;
								}
								DayChoice = false;
								Knarl.setMdays(0);
							}
							if (answer.equals("towncenter") && TownCenter == true && wood > 9 && sap > 4){
								System.out.println("You start building your TownCenter");
								wood -= 10;
								sap -= 5;
								TownCenterB = true;
								KnarlActive = true;
								KnarlBuildingTownCenter = true;
								Knarl.setMdays(0);
								TownCenter = false;
								TownCenterDays = 5;
								if (Knarl.getBuilding() <= 4){
									TownCenterDays = TownCenterDays/1;
								}else if (Knarl.getBuilding() <= 7 && Knarl.getBuilding() > 4){
									TownCenterDays = TownCenterDays/2;
								}else if (Knarl.getBuilding() > 7){
									TownCenterDays = TownCenterDays/3;
								}
								DayChoice = false;
							}
							if (answer.equals("smith") && Smith == true && stone >= 15 && sap >= 5){
								System.out.println("You start building your smith");
								stone -= 15;
								sap -= 5;
								SmithB = true;
								KnarlActive = true;
								KnarlBuildingSmith = true;
								Smith = false;
								Knarl.setMdays(0);
								SmithDays = 9;
								if (Knarl.getBuilding() <= 4){
									SmithDays = SmithDays/1;
								}else if (Knarl.getBuilding() <= 7 && Knarl.getBuilding() > 4){
									SmithDays = SmithDays/2;
								}else if (Knarl.getBuilding() > 7){
									SmithDays = SmithDays/3;
								}
								DayChoice = false;
							}
							if (answer.equals("upgradedfarm") && UFarm == true && wood >= 10 && sap >= 10 && food >= 10){
								System.out.println("You start building your UpgradedFarm");
								food -= 10;
								wood -= 10;
								sap -= 10;
								UFarmB = true;
								KnarlActive = true;
								KnarlBuildingUFarm = true;
								UFarm = false;
								UFarmDays = 12;
								if (Knarl.getBuilding() <= 4){
									UFarmDays = UFarmDays/1;
								}else if (Knarl.getBuilding() <= 7 && Knarl.getBuilding() > 4){
									UFarmDays = UFarmDays/2;
								}else if (Knarl.getBuilding() > 7){
									UFarmDays = UFarmDays/3;
								}
								DayChoice = false;
								Knarl.setMdays(0);
							}
							if (answer.equals("farm") && Farm == true && food >= 5 && stone >= 5){
								System.out.println("You start building a farm");
								food -= 5;
								stone -= 5;
								FarmB = true;
								KnarlBuildingFarm = true;
								KnarlActive = true;
								Farm = false;
								Knarl.setMdays(0);
								FarmDays = 6;
								if (Knarl.getBuilding() <= 4){
									FarmDays = FarmDays/1;
								}else if (Knarl.getBuilding() <= 7 && Knarl.getBuilding() > 4){
									FarmDays = FarmDays/2;
								}else if (Knarl.getBuilding() > 7){
									FarmDays = FarmDays/3;
								}
								DayChoice = false;
							}
							if (answer.equals("habitat") && Habitat == true && wood >= 5 && stone >= 5 && sap >= 5){
								System.out.println("You start building a habitat");
								wood -= 5;
								stone -= 5;
								sap -= 5;
								KnarlBuildingHabitat = true;
								HabitatB = true;
								KnarlActive = true;
								Habitat = false;
								Knarl.setMdays(0);
								HabitatDays = 9;
								if (Knarl.getBuilding() <= 4){
									HabitatDays = HabitatDays/1;
								}else if (Knarl.getBuilding() <= 7 && Knarl.getBuilding() > 4){
									HabitatDays = HabitatDays/2;
								}else if (Knarl.getBuilding() > 7){
									HabitatDays = HabitatDays/3;
								}
								DayChoice = false;
							}
						}
						//------------------------------BUILDING FINISHED-----------------------
						//-----------------------------FOOD-------------------------------------
						if (answer.equals("startfood") && KnarlActive == false){
							Knarl.setMdays(0);
							KnarlFood = true;

							KnarlActive = true;
							DayChoice = false;

						}else if (answer.equals("recall") && KnarlActive == true && KnarlFood == true){
							resources = Knarl.CreatureMission(Knarl.getHunting(), Knarl.getMdays());

							KnarlFood = false;
							Cfood = resources;
							DayChoice = false;
							KnarlActive = false;
						}
						//--------------------------------FOOD END------------------------------

						//---------------------------------STONE--------------------------------
						else if (answer.equals("startstone") && KnarlActive == false){
							Knarl.setMdays(0);
							KnarlStone = true;

							KnarlActive = true;
							DayChoice = false;

						}else if (answer.equals("recall") && KnarlActive == true && KnarlStone == true){
							resources = Knarl.CreatureMission(Knarl.getMining(), Knarl.getMdays());

							KnarlStone = false;
							Cstone = resources;
							DayChoice = false;
							KnarlActive = false;
						}
						//-------------------------------STONE END------------------------------

						//---------------------------------WOOD---------------------------------
						else if (answer.equals("startwood") && KnarlActive == false){
							Knarl.setMdays(0);
							KnarlWood = true;

							KnarlActive = true;
							DayChoice = false;

						}else if (answer.equals("recall") && KnarlActive == true && KnarlWood == true){
							resources = Knarl.CreatureMission(Knarl.getCutting(), Knarl.getMdays());

							KnarlWood = false;
							Cwood = resources;
							DayChoice = false;
							KnarlActive = false;
						}
						//--------------------------------WOOD END------------------------------

						//----------------------------------SAP---------------------------------
						else if (answer.equals("startsap") && KnarlActive == false){
							Knarl.setMdays(0);
							KnarlSap = true;

							KnarlActive = true;
							DayChoice = false;

						}else if (answer.equals("recall") && KnarlActive == true && KnarlSap == true){
							resources = Knarl.CreatureMission(Knarl.getScollecting(), Knarl.getMdays());

							KnarlSap = false;
							Csap = resources;
							DayChoice = false;
							KnarlActive = false;
						}
						//---------------------------------SAP END------------------------------
					}else if (answer.equals("Knarl") && CreatureKnarl == false){
						System.out.println("You dont have a Knarl... how did u get here?");
					}
					//-------------------------------------KNARL END---------------------------
					//---------------------------------BRISTLE START-------------------------------------
					if (answer.equals("bristle") && CreatureBristle == true){
						System.out.println("what would you like to do with the Bristle?");
						System.out.println("You can say 'start(insert what resource you want to get)' or 'defend' or 'build'");
						System.out.println("If you want to recall a to reap your resources say 'recall' (Creature must be active)");
						answer = choice.next();

						if (answer.equals("stats")){
							System.out.println("Hunting: " + Bristle.getHunting());
							System.out.println("Sap Collecting: " + Bristle.getScollecting());
							System.out.println("Mining: " + Bristle.getMining());
							System.out.println("Cutting (wood): " + Bristle.getCutting());
							System.out.println("Defending: " + Bristle.getDefending());
							System.out.println("Building: " + Bristle.getBuilding());
							answer = choice.next();
						}
						//------------------------------DEFENDING-------------------------------
						if (answer.equals("defend") && BristleActive == false){
							System.out.println("Your Bristle starts defending the camp");
							if (Bristle.getDefending() < 3){
								defense += 1;
								BristleDefense = 1;
							}else if (Bristle.getDefending() > 3 && Bristle.getDefending() < 7){
								defense += 2;
								BristleDefense = 2;
							}else{
								defense += 3;
								BristleDefense = 3;
							}
							BristleDefend = true;
							BristleActive = true;
							DayChoice = false;
						}
						if (answer.equals("recall") && BristleDefend == true && BristleActive == true){
							defense = defense - BristleDefense;
							BristleDefense = 0;
							BristleActive = false;
							DayChoice = false;
						}
						//-----------------------------DEFENDING END----------------------------
						//------------------------------BUILDING--------------------------------

						if (answer.equals("build") && BristleActive == false){
							System.out.println("Here is what you can build");
							if (UWalls == true){
								System.out.println("UpgradedWalls");
								System.out.println("days: 7");
								System.out.println("stone: 10");
								System.out.println("sap: 5");
								System.out.println("");
							}
							if (Walls == true){
								System.out.println("Walls");
								System.out.println("days: 7");
								System.out.println("wood: 10");
								System.out.println("sap: 5");
								System.out.println("");
							}
							if (TownBoard == true){
								System.out.println("TownBoard");
								System.out.println("days: 5");
								System.out.println("wood: 5");
								System.out.println("stone: 5");
								System.out.println("sap: 5");
								System.out.println("");
							}
							if (TownHall == true){
								System.out.println("TownHall");
								System.out.println("days: 16");
								System.out.println("wood: 20");
								System.out.println("stone: 10");
								System.out.println("sap: 5");
								System.out.println("");
							}
							if (Granary == true){
								System.out.println("Granary");
								System.out.println("Days: 12");
								System.out.println("Sap: 15");
								System.out.println("Stone: 15");
								System.out.println("");
							}
							if (Tavern == true){
								System.out.println("Tavern");
								System.out.println("days: 15");
								System.out.println("wood: 15");
								System.out.println("stone: 10");
								System.out.println("food: 5");
								System.out.println("");
							}
							if (Smith == true){
								System.out.println("Smith");
								System.out.println("days: 9");
								System.out.println("stone: 15");
								System.out.println("sap: 5");
								System.out.println("");
							}
							if (UFarm == true){
								System.out.println("UpgradedFarm");
								System.out.println("days: 12");
								System.out.println("wood: 10");
								System.out.println("food: 5");
								System.out.println("sap: 10");
								System.out.println("");
							}
							if (TownCenter == true){
								System.out.println("TownCenter");
								System.out.println("days: 5");
								System.out.println("wood: 10");
								System.out.println("sap: 5");
								System.out.println("");
							}
							if (Farm == true){
								System.out.println("Farm");
								System.out.println("days: 6");
								System.out.println("food: 5");
								System.out.println("stone: 5");
								System.out.println("");
							}
							if (Habitat == true){
								System.out.println("Habitat");
								System.out.println("days: 10");
								System.out.println("wood: 5");
								System.out.println("sap: 5");
								System.out.println("stone: 5");
								System.out.println("");
							}

							else if (answer.equals("build") && BristleActive == true){
								System.out.println("The Bristle is busy (on a mission or building something)");
							}


							System.out.println("What, of those, would you like to build? (Remember, dont use any caps!)");
							System.out.println("If you need to see your resources say resources");
							answer = choice.next();

							if (answer.equals("resources") || answer.equals("Resources") || answer.equals("Stats") || answer.equals("stats")){
								System.out.println("Stone is: " + stone);
								System.out.println("Wood is: " + wood);
								System.out.println("Sap is: " + sap);
								System.out.println("Food is: " + food);
								System.out.println("FoodUse is: " + FoodUse);
								answer = choice.next();
							}
							if (answer.equals("back") || answer.equals("Back")){
								back = true;
							}
							if (answer.equals("upgradedwalls") && UWalls == true && stone >= 10 && sap >= 5){
								stone -= 10;
								sap -= 5;
								UWallsB = true;
								BristleActive = true;
								BristleBuildingUWalls = true;
								UWalls = false;
								UWallsDays = 7;
								if (Bristle.getBuilding() <= 4){
									TownBoardDays = TownBoardDays/1;
								}else if (Bristle.getBuilding() <= 7 && Bristle.getBuilding() > 4){
									TownBoardDays = TownBoardDays/2;
								}else if (Bristle.getBuilding() > 7){
									TownBoardDays = TownBoardDays/3;
								}
								DayChoice = false;
								Bristle.setMdays(0);
							}
							if (answer.equals("townboard") && TownBoard == true && wood >= 5 && sap >= 5 && stone >= 5){
								wood -= 5;
								stone -= 5;
								sap -= 5;
								TownBoardB = true;
								BristleActive = true;
								BristleBuildingTownBoard = true;
								TownBoard = false;
								TownBoardDays = 5;
								if (Bristle.getBuilding() <= 4){
									TownBoardDays = TownBoardDays/1;
								}else if (Bristle.getBuilding() <= 7 && Bristle.getBuilding() > 4){
									TownBoardDays = TownBoardDays/2;
								}else if (Bristle.getBuilding() > 7){
									TownBoardDays = TownBoardDays/3;
								}
								DayChoice = false;
								Bristle.setMdays(0);
							}
							if  (answer.equals("walls") && Walls == true && wood >= 10 && sap >= 5){
								wood -= 10;
								sap -= 5;
								WallsB = true;
								BristleActive = true;
								BristleBuildingWalls = true;
								Walls = false;
								WallsDays = 7;
								if (Bristle.getBuilding() <= 4){
									WallsDays = WallsDays/1;
								}else if (Bristle.getBuilding() <= 7 && Bristle.getBuilding() > 4){
									WallsDays = WallsDays/2;
								}else if (Bristle.getBuilding() > 7){
									WallsDays = WallsDays/3;
								}
								DayChoice = false;
								Bristle.setMdays(0);
							}
							if (answer.equals("townhall") && TownHall == true && wood >= 20 && sap >= 5 && stone >= 10){
								stone -= 10;
								sap -= 5;
								wood -= 20;
								TownHallB = true;
								BristleActive = true;
								BristleBuildingTownHall = true;
								TownHall = false;
								TownHallDays = 16;
								if (Bristle.getBuilding() <= 4){
									TownHallDays = TownHallDays/1;
								}else if (Bristle.getBuilding() <= 7 && Bristle.getBuilding() > 4){
									TownHallDays = TownHallDays/2;
								}else if (Bristle.getBuilding() > 7){
									TownHallDays = TownHallDays/3;
								}
								DayChoice = false;
								Bristle.setMdays(0);
							}
							if (answer.equals("granary") && Granary == true && stone >= 15 && sap >= 15){
								System.out.println("you start building your Granary");
								stone -= 15;
								sap -= 15;
								GranaryB = true;
								BristleActive = true;
								BristleBuildingGranary = true;
								Granary = false;
								GranaryDays = 12;
								if (Bristle.getBuilding() <= 4){
									GranaryDays = GranaryDays/1;
								}else if (Bristle.getBuilding() <= 7 && Bristle.getBuilding() > 4){
									GranaryDays = GranaryDays/2;
								}else if (Bristle.getBuilding() > 7){
									GranaryDays = GranaryDays/3;
								}
								DayChoice = false;
								Bristle.setMdays(0);
							}
							if (answer.equals("tavern") && Tavern == true && wood >= 15 && stone >= 10 && food >= 5){
								System.out.println("You start building your Tavern");
								wood -= 15;
								stone -= 10;
								TavernB = true;
								BristleActive = true;
								BristleBuildingTavern = true;
								Tavern = false;
								TavernDays = 15;
								if (Bristle.getBuilding() <= 4){
									TavernDays = TavernDays/1;
								}else if (Bristle.getBuilding() <= 7 && Bristle.getBuilding() > 4){
									TavernDays = TavernDays/2;
								}else if (Bristle.getBuilding() > 7){
									TavernDays = TavernDays/3;
								}
								DayChoice = false;
								Bristle.setMdays(0);
							}
							if (answer.equals("towncenter") && TownCenter == true && wood > 9 && sap > 4){
								System.out.println("You start building your TownCenter");
								wood -= 10;
								sap -= 5;
								TownCenterB = true;
								BristleActive = true;
								BristleBuildingTownCenter = true;
								Bristle.setMdays(0);
								TownCenter = false;
								TownCenterDays = 5;
								if (Bristle.getBuilding() <= 4){
									TownCenterDays = TownCenterDays/1;
								}else if (Bristle.getBuilding() <= 7 && Bristle.getBuilding() > 4){
									TownCenterDays = TownCenterDays/2;
								}else if (Bristle.getBuilding() > 7){
									TownCenterDays = TownCenterDays/3;
								}
								DayChoice = false;
							}
							if (answer.equals("smith") && Smith == true && stone >= 15 && sap >= 5){
								System.out.println("You start building your smith");
								stone -= 15;
								sap -= 5;
								SmithB = true;
								BristleActive = true;
								BristleBuildingSmith = true;
								Smith = false;
								Bristle.setMdays(0);
								SmithDays = 9;
								if (Bristle.getBuilding() <= 4){
									SmithDays = SmithDays/1;
								}else if (Bristle.getBuilding() <= 7 && Bristle.getBuilding() > 4){
									SmithDays = SmithDays/2;
								}else if (Bristle.getBuilding() > 7){
									SmithDays = SmithDays/3;
								}
								DayChoice = false;
							}
							if (answer.equals("upgradedfarm") && UFarm == true && wood >= 10 && sap >= 10 && food >= 10){
								System.out.println("You start building your UpgradedFarm");
								food -= 10;
								wood -= 10;
								sap -= 10;
								UFarmB = true;
								BristleActive = true;
								BristleBuildingUFarm = true;
								UFarm = false;
								UFarmDays = 12;
								if (Bristle.getBuilding() <= 4){
									UFarmDays = UFarmDays/1;
								}else if (Bristle.getBuilding() <= 7 && Bristle.getBuilding() > 4){
									UFarmDays = UFarmDays/2;
								}else if (Bristle.getBuilding() > 7){
									UFarmDays = UFarmDays/3;
								}
								DayChoice = false;
								Bristle.setMdays(0);
							}
							if (answer.equals("farm") && Farm == true && food >= 5 && stone >= 5){
								System.out.println("You start building a farm");
								food -= 5;
								stone -= 5;
								FarmB = true;
								BristleBuildingFarm = true;
								BristleActive = true;
								Farm = false;
								Bristle.setMdays(0);
								FarmDays = 6;
								if (Bristle.getBuilding() <= 4){
									FarmDays = FarmDays/1;
								}else if (Bristle.getBuilding() <= 7 && Bristle.getBuilding() > 4){
									FarmDays = FarmDays/2;
								}else if (Bristle.getBuilding() > 7){
									FarmDays = FarmDays/3;
								}
								DayChoice = false;
							}
							if (answer.equals("habitat") && Habitat == true && wood >= 5 && stone >= 5 && sap >= 5){
								System.out.println("You start building a habitat");
								wood -= 5;
								stone -= 5;
								sap -= 5;
								BristleBuildingHabitat = true;
								HabitatB = true;
								BristleActive = true;
								Habitat = false;
								Bristle.setMdays(0);
								HabitatDays = 9;
								if (Bristle.getBuilding() <= 4){
									HabitatDays = HabitatDays/1;
								}else if (Bristle.getBuilding() <= 7 && Bristle.getBuilding() > 4){
									HabitatDays = HabitatDays/2;
								}else if (Bristle.getBuilding() > 7){
									HabitatDays = HabitatDays/3;
								}
								DayChoice = false;
							}
						}
						//------------------------------BUILDING FINISHED-----------------------
						//-----------------------------FOOD-------------------------------------
						if (answer.equals("startfood") && BristleActive == false){
							Bristle.setMdays(0);
							BristleFood = true;

							BristleActive = true;
							DayChoice = false;

						}else if (answer.equals("recall") && BristleActive == true && BristleFood == true){
							resources = Bristle.CreatureMission(Bristle.getHunting(), Bristle.getMdays());

							BristleFood = false;
							Cfood = resources;
							DayChoice = false;
							BristleActive = false;
						}
						//--------------------------------FOOD END------------------------------

						//---------------------------------STONE--------------------------------
						else if (answer.equals("startstone") && BristleActive == false){
							Bristle.setMdays(0);
							BristleStone = true;

							BristleActive = true;
							DayChoice = false;

						}else if (answer.equals("recall") && BristleActive == true && BristleStone == true){
							resources = Bristle.CreatureMission(Bristle.getMining(), Bristle.getMdays());

							BristleStone = false;
							Cstone = resources;
							DayChoice = false;
							BristleActive = false;
						}
						//-------------------------------STONE END------------------------------

						//---------------------------------WOOD---------------------------------
						else if (answer.equals("startwood") && BristleActive == false){
							Bristle.setMdays(0);
							BristleWood = true;

							BristleActive = true;
							DayChoice = false;

						}else if (answer.equals("recall") && BristleActive == true && BristleWood == true){
							resources = Bristle.CreatureMission(Bristle.getCutting(), Bristle.getMdays());

							BristleWood = false;
							Cwood = resources;
							DayChoice = false;
							BristleActive = false;
						}
						//--------------------------------WOOD END------------------------------

						//----------------------------------SAP---------------------------------
						else if (answer.equals("startsap") && BristleActive == false){
							Bristle.setMdays(0);
							BristleSap = true;

							BristleActive = true;
							DayChoice = false;

						}else if (answer.equals("recall") && BristleActive == true && BristleSap == true){
							resources = Bristle.CreatureMission(Bristle.getScollecting(), Bristle.getMdays());

							BristleSap = false;
							Csap = resources;
							DayChoice = false;
							BristleActive = false;
						}
						//---------------------------------SAP END------------------------------
					}else if (answer.equals("Bristle") && CreatureBristle == false){
						System.out.println("You dont have a Bristle... how did u get here?");
					}
					//-------------------------------------BRISTLE END---------------------------
					//---------------------------------WHELP START-------------------------------------
					if (answer.equals("whelp") && CreatureWhelp == true){
						System.out.println("what would you like to do with the Whelp?");
						System.out.println("You can say 'start(insert what resource you want to get)' or 'defend' or 'build'");
						System.out.println("If you want to recall a to reap your resources say 'recall' (Creature must be active)");
						answer = choice.next();

						if (answer.equals("stats")){
							System.out.println("Hunting: " + Whelp.getHunting());
							System.out.println("Sap Collecting: " + Whelp.getScollecting());
							System.out.println("Mining: " + Whelp.getMining());
							System.out.println("Cutting (wood): " + Whelp.getCutting());
							System.out.println("Defending: " + Whelp.getDefending());
							System.out.println("Building: " + Whelp.getBuilding());
							answer = choice.next();
						}
						//------------------------------DEFENDING-------------------------------
						if (answer.equals("defend") && WhelpActive == false){
							System.out.println("Your Whelp starts defending the camp");
							if (Whelp.getDefending() < 3){
								defense += 1;
								WhelpDefense = 1;
							}else if (Whelp.getDefending() > 3 && Whelp.getDefending() < 7){
								defense += 2;
								WhelpDefense = 2;
							}else{
								defense += 3;
								WhelpDefense = 3;
							}
							WhelpDefend = true;
							WhelpActive = true;
							DayChoice = false;
						}
						if (answer.equals("recall") && WhelpDefend == true && WhelpActive == true){
							defense = defense - WhelpDefense;
							WhelpDefense = 0;
							WhelpActive = false;
							DayChoice = false;
						}
						//-----------------------------DEFENDING END----------------------------
						//------------------------------BUILDING--------------------------------

						if (answer.equals("build") && WhelpActive == false){
							System.out.println("Here is what you can build");
							if (UWalls == true){
								System.out.println("UpgradedWalls");
								System.out.println("days: 7");
								System.out.println("stone: 10");
								System.out.println("sap: 5");
								System.out.println("");
							}
							if (Walls == true){
								System.out.println("Walls");
								System.out.println("days: 7");
								System.out.println("wood: 10");
								System.out.println("sap: 5");
								System.out.println("");
							}
							if (TownBoard == true){
								System.out.println("TownBoard");
								System.out.println("days: 5");
								System.out.println("wood: 5");
								System.out.println("stone: 5");
								System.out.println("sap: 5");
								System.out.println("");
							}
							if (TownHall == true){
								System.out.println("TownHall");
								System.out.println("days: 16");
								System.out.println("wood: 20");
								System.out.println("stone: 10");
								System.out.println("sap: 5");
								System.out.println("");
							}
							if (Granary == true){
								System.out.println("Granary");
								System.out.println("Days: 12");
								System.out.println("Sap: 15");
								System.out.println("Stone: 15");
								System.out.println("");
							}
							if (Tavern == true){
								System.out.println("Tavern");
								System.out.println("days: 15");
								System.out.println("wood: 15");
								System.out.println("stone: 10");
								System.out.println("food: 5");
								System.out.println("");
							}
							if (Smith == true){
								System.out.println("Smith");
								System.out.println("days: 9");
								System.out.println("stone: 15");
								System.out.println("sap: 5");
								System.out.println("");
							}
							if (UFarm == true){
								System.out.println("UpgradedFarm");
								System.out.println("days: 12");
								System.out.println("wood: 10");
								System.out.println("food: 5");
								System.out.println("sap: 10");
								System.out.println("");
							}
							if (TownCenter == true){
								System.out.println("TownCenter");
								System.out.println("days: 5");
								System.out.println("wood: 10");
								System.out.println("sap: 5");
								System.out.println("");
							}
							if (Farm == true){
								System.out.println("Farm");
								System.out.println("days: 6");
								System.out.println("food: 5");
								System.out.println("stone: 5");
								System.out.println("");
							}
							if (Habitat == true){
								System.out.println("Habitat");
								System.out.println("days: 10");
								System.out.println("wood: 5");
								System.out.println("sap: 5");
								System.out.println("stone: 5");
								System.out.println("");
							}

							else if (answer.equals("build") && WhelpActive == true){
								System.out.println("The Whelp is busy (on a mission or building something)");
							}


							System.out.println("What, of those, would you like to build? (Remember, dont use any caps!)");
							System.out.println("If you need to see your resources say resources");
							answer = choice.next();

							if (answer.equals("resources") || answer.equals("Resources") || answer.equals("Stats") || answer.equals("stats")){
								System.out.println("Stone is: " + stone);
								System.out.println("Wood is: " + wood);
								System.out.println("Sap is: " + sap);
								System.out.println("Food is: " + food);
								System.out.println("FoodUse is: " + FoodUse);
								answer = choice.next();
							}
							if (answer.equals("back") || answer.equals("Back")){
								back = true;
							}
							if (answer.equals("upgradedwalls") && UWalls == true && stone >= 10 && sap >= 5){
								stone -= 10;
								sap -= 5;
								UWallsB = true;
								WhelpActive = true;
								WhelpBuildingUWalls = true;
								UWalls = false;
								UWallsDays = 7;
								if (Whelp.getBuilding() <= 4){
									TownBoardDays = TownBoardDays/1;
								}else if (Whelp.getBuilding() <= 7 && Whelp.getBuilding() > 4){
									TownBoardDays = TownBoardDays/2;
								}else if (Whelp.getBuilding() > 7){
									TownBoardDays = TownBoardDays/3;
								}
								DayChoice = false;
								Whelp.setMdays(0);
							}
							if (answer.equals("townboard") && TownBoard == true && wood >= 5 && sap >= 5 && stone >= 5){
								wood -= 5;
								stone -= 5;
								sap -= 5;
								TownBoardB = true;
								WhelpActive = true;
								WhelpBuildingTownBoard = true;
								TownBoard = false;
								TownBoardDays = 5;
								if (Whelp.getBuilding() <= 4){
									TownBoardDays = TownBoardDays/1;
								}else if (Whelp.getBuilding() <= 7 && Whelp.getBuilding() > 4){
									TownBoardDays = TownBoardDays/2;
								}else if (Whelp.getBuilding() > 7){
									TownBoardDays = TownBoardDays/3;
								}
								DayChoice = false;
								Whelp.setMdays(0);
							}
							if  (answer.equals("walls") && Walls == true && wood >= 10 && sap >= 5){
								wood -= 10;
								sap -= 5;
								WallsB = true;
								WhelpActive = true;
								WhelpBuildingWalls = true;
								Walls = false;
								WallsDays = 7;
								if (Whelp.getBuilding() <= 4){
									WallsDays = WallsDays/1;
								}else if (Whelp.getBuilding() <= 7 && Whelp.getBuilding() > 4){
									WallsDays = WallsDays/2;
								}else if (Whelp.getBuilding() > 7){
									WallsDays = WallsDays/3;
								}
								DayChoice = false;
								Whelp.setMdays(0);
							}
							if (answer.equals("townhall") && TownHall == true && wood >= 20 && sap >= 5 && stone >= 10){
								stone -= 10;
								sap -= 5;
								wood -= 20;
								TownHallB = true;
								WhelpActive = true;
								WhelpBuildingTownHall = true;
								TownHall = false;
								TownHallDays = 16;
								if (Whelp.getBuilding() <= 4){
									TownHallDays = TownHallDays/1;
								}else if (Whelp.getBuilding() <= 7 && Whelp.getBuilding() > 4){
									TownHallDays = TownHallDays/2;
								}else if (Whelp.getBuilding() > 7){
									TownHallDays = TownHallDays/3;
								}
								DayChoice = false;
								Whelp.setMdays(0);
							}
							if (answer.equals("granary") && Granary == true && stone >= 15 && sap >= 15){
								System.out.println("you start building your Granary");
								stone -= 15;
								sap -= 15;
								GranaryB = true;
								WhelpActive = true;
								WhelpBuildingGranary = true;
								Granary = false;
								GranaryDays = 12;
								if (Whelp.getBuilding() <= 4){
									GranaryDays = GranaryDays/1;
								}else if (Whelp.getBuilding() <= 7 && Whelp.getBuilding() > 4){
									GranaryDays = GranaryDays/2;
								}else if (Whelp.getBuilding() > 7){
									GranaryDays = GranaryDays/3;
								}
								DayChoice = false;
								Whelp.setMdays(0);
							}
							if (answer.equals("tavern") && Tavern == true && wood >= 15 && stone >= 10 && food >= 5){
								System.out.println("You start building your Tavern");
								wood -= 15;
								stone -= 10;
								TavernB = true;
								WhelpActive = true;
								WhelpBuildingTavern = true;
								Tavern = false;
								TavernDays = 15;
								if (Whelp.getBuilding() <= 4){
									TavernDays = TavernDays/1;
								}else if (Whelp.getBuilding() <= 7 && Whelp.getBuilding() > 4){
									TavernDays = TavernDays/2;
								}else if (Whelp.getBuilding() > 7){
									TavernDays = TavernDays/3;
								}
								DayChoice = false;
								Whelp.setMdays(0);
							}
							if (answer.equals("towncenter") && TownCenter == true && wood > 9 && sap > 4){
								System.out.println("You start building your TownCenter");
								wood -= 10;
								sap -= 5;
								TownCenterB = true;
								WhelpActive = true;
								WhelpBuildingTownCenter = true;
								Whelp.setMdays(0);
								TownCenter = false;
								TownCenterDays = 5;
								if (Whelp.getBuilding() <= 4){
									TownCenterDays = TownCenterDays/1;
								}else if (Whelp.getBuilding() <= 7 && Whelp.getBuilding() > 4){
									TownCenterDays = TownCenterDays/2;
								}else if (Whelp.getBuilding() > 7){
									TownCenterDays = TownCenterDays/3;
								}
								DayChoice = false;
							}
							if (answer.equals("smith") && Smith == true && stone >= 15 && sap >= 5){
								System.out.println("You start building your smith");
								stone -= 15;
								sap -= 5;
								SmithB = true;
								WhelpActive = true;
								WhelpBuildingSmith = true;
								Smith = false;
								Whelp.setMdays(0);
								SmithDays = 9;
								if (Whelp.getBuilding() <= 4){
									SmithDays = SmithDays/1;
								}else if (Whelp.getBuilding() <= 7 && Whelp.getBuilding() > 4){
									SmithDays = SmithDays/2;
								}else if (Whelp.getBuilding() > 7){
									SmithDays = SmithDays/3;
								}
								DayChoice = false;
							}
							if (answer.equals("upgradedfarm") && UFarm == true && wood >= 10 && sap >= 10 && food >= 10){
								System.out.println("You start building your UpgradedFarm");
								food -= 10;
								wood -= 10;
								sap -= 10;
								UFarmB = true;
								WhelpActive = true;
								WhelpBuildingUFarm = true;
								UFarm = false;
								UFarmDays = 12;
								if (Whelp.getBuilding() <= 4){
									UFarmDays = UFarmDays/1;
								}else if (Whelp.getBuilding() <= 7 && Whelp.getBuilding() > 4){
									UFarmDays = UFarmDays/2;
								}else if (Whelp.getBuilding() > 7){
									UFarmDays = UFarmDays/3;
								}
								DayChoice = false;
								Whelp.setMdays(0);
							}
							if (answer.equals("farm") && Farm == true && food >= 5 && stone >= 5){
								System.out.println("You start building a farm");
								food -= 5;
								stone -= 5;
								FarmB = true;
								WhelpBuildingFarm = true;
								WhelpActive = true;
								Farm = false;
								Whelp.setMdays(0);
								FarmDays = 6;
								if (Whelp.getBuilding() <= 4){
									FarmDays = FarmDays/1;
								}else if (Whelp.getBuilding() <= 7 && Whelp.getBuilding() > 4){
									FarmDays = FarmDays/2;
								}else if (Whelp.getBuilding() > 7){
									FarmDays = FarmDays/3;
								}
								DayChoice = false;
							}
							if (answer.equals("habitat") && Habitat == true && wood >= 5 && stone >= 5 && sap >= 5){
								System.out.println("You start building a habitat");
								wood -= 5;
								stone -= 5;
								sap -= 5;
								WhelpBuildingHabitat = true;
								HabitatB = true;
								WhelpActive = true;
								Habitat = false;
								Whelp.setMdays(0);
								HabitatDays = 9;
								if (Whelp.getBuilding() <= 4){
									HabitatDays = HabitatDays/1;
								}else if (Whelp.getBuilding() <= 7 && Whelp.getBuilding() > 4){
									HabitatDays = HabitatDays/2;
								}else if (Whelp.getBuilding() > 7){
									HabitatDays = HabitatDays/3;
								}
								DayChoice = false;
							}
						}
						//------------------------------BUILDING FINISHED-----------------------
						//-----------------------------FOOD-------------------------------------
						if (answer.equals("startfood") && WhelpActive == false){
							Whelp.setMdays(0);
							WhelpFood = true;

							WhelpActive = true;
							DayChoice = false;

						}else if (answer.equals("recall") && WhelpActive == true && WhelpFood == true){
							resources = Whelp.CreatureMission(Whelp.getHunting(), Whelp.getMdays());

							WhelpFood = false;
							Cfood = resources;
							DayChoice = false;
							WhelpActive = false;
						}
						//--------------------------------FOOD END------------------------------

						//---------------------------------STONE--------------------------------
						else if (answer.equals("startstone") && WhelpActive == false){
							Whelp.setMdays(0);
							WhelpStone = true;

							WhelpActive = true;
							DayChoice = false;

						}else if (answer.equals("recall") && WhelpActive == true && WhelpStone == true){
							resources = Whelp.CreatureMission(Whelp.getMining(), Whelp.getMdays());

							WhelpStone = false;
							Cstone = resources;
							DayChoice = false;
							WhelpActive = false;
						}
						//-------------------------------STONE END------------------------------

						//---------------------------------WOOD---------------------------------
						else if (answer.equals("startwood") && WhelpActive == false){
							Whelp.setMdays(0);
							WhelpWood = true;

							WhelpActive = true;
							DayChoice = false;

						}else if (answer.equals("recall") && WhelpActive == true && WhelpWood == true){
							resources = Whelp.CreatureMission(Whelp.getCutting(), Whelp.getMdays());

							WhelpWood = false;
							Cwood = resources;
							DayChoice = false;
							WhelpActive = false;
						}
						//--------------------------------WOOD END------------------------------

						//----------------------------------SAP---------------------------------
						else if (answer.equals("startsap") && WhelpActive == false){
							Whelp.setMdays(0);
							WhelpSap = true;

							WhelpActive = true;
							DayChoice = false;

						}else if (answer.equals("recall") && WhelpActive == true && WhelpSap == true){
							resources = Whelp.CreatureMission(Whelp.getScollecting(), Whelp.getMdays());

							WhelpSap = false;
							Csap = resources;
							DayChoice = false;
							WhelpActive = false;
						}
						//---------------------------------SAP END------------------------------
					}else if (answer.equals("Whelp") && CreatureWhelp == false){
						System.out.println("You dont have a Whelp... how did u get here?");
					}
					//-------------------------------------WHELP END---------------------------
					//---------------------------------GOBLIN START-------------------------------------
					if (answer.equals("goblin") && CreatureGoblin == true){
						System.out.println("what would you like to do with the Goblin?");
						System.out.println("You can say 'start(insert what resource you want to get)' or 'defend' or 'build'");
						System.out.println("If you want to recall a to reap your resources say 'recall' (Creature must be active)");
						answer = choice.next();

						if (answer.equals("stats")){
							System.out.println("Hunting: " + Goblin.getHunting());
							System.out.println("Sap Collecting: " + Goblin.getScollecting());
							System.out.println("Mining: " + Goblin.getMining());
							System.out.println("Cutting (wood): " + Goblin.getCutting());
							System.out.println("Defending: " + Goblin.getDefending());
							System.out.println("Building: " + Goblin.getBuilding());
							answer = choice.next();
						}
						//------------------------------DEFENDING-------------------------------
						if (answer.equals("defend") && GoblinActive == false){
							System.out.println("Your Goblin starts defending the camp");
							if (Goblin.getDefending() < 3){
								defense += 1;
								GoblinDefense = 1;
							}else if (Goblin.getDefending() > 3 && Goblin.getDefending() < 7){
								defense += 2;
								GoblinDefense = 2;
							}else{
								defense += 3;
								GoblinDefense = 3;
							}
							GoblinDefend = true;
							GoblinActive = true;
							DayChoice = false;
						}
						if (answer.equals("recall") && GoblinDefend == true && GoblinActive == true){
							defense = defense - GoblinDefense;
							GoblinDefense = 0;
							GoblinActive = false;
							DayChoice = false;
						}
						//-----------------------------DEFENDING END----------------------------
						//------------------------------BUILDING--------------------------------

						if (answer.equals("build") && GoblinActive == false){
							System.out.println("Here is what you can build");
							if (UWalls == true){
								System.out.println("UpgradedWalls");
								System.out.println("days: 7");
								System.out.println("stone: 10");
								System.out.println("sap: 5");
								System.out.println("");
							}
							if (Walls == true){
								System.out.println("Walls");
								System.out.println("days: 7");
								System.out.println("wood: 10");
								System.out.println("sap: 5");
								System.out.println("");
							}
							if (TownBoard == true){
								System.out.println("TownBoard");
								System.out.println("days: 5");
								System.out.println("wood: 5");
								System.out.println("stone: 5");
								System.out.println("sap: 5");
								System.out.println("");
							}
							if (TownHall == true){
								System.out.println("TownHall");
								System.out.println("days: 16");
								System.out.println("wood: 20");
								System.out.println("stone: 10");
								System.out.println("sap: 5");
								System.out.println("");
							}
							if (Granary == true){
								System.out.println("Granary");
								System.out.println("Days: 12");
								System.out.println("Sap: 15");
								System.out.println("Stone: 15");
								System.out.println("");
							}
							if (Tavern == true){
								System.out.println("Tavern");
								System.out.println("days: 15");
								System.out.println("wood: 15");
								System.out.println("stone: 10");
								System.out.println("food: 5");
								System.out.println("");
							}
							if (Smith == true){
								System.out.println("Smith");
								System.out.println("days: 9");
								System.out.println("stone: 15");
								System.out.println("sap: 5");
								System.out.println("");
							}
							if (UFarm == true){
								System.out.println("UpgradedFarm");
								System.out.println("days: 12");
								System.out.println("wood: 10");
								System.out.println("food: 5");
								System.out.println("sap: 10");
								System.out.println("");
							}
							if (TownCenter == true){
								System.out.println("TownCenter");
								System.out.println("days: 5");
								System.out.println("wood: 10");
								System.out.println("sap: 5");
								System.out.println("");
							}
							if (Farm == true){
								System.out.println("Farm");
								System.out.println("days: 6");
								System.out.println("food: 5");
								System.out.println("stone: 5");
								System.out.println("");
							}
							if (Habitat == true){
								System.out.println("Habitat");
								System.out.println("days: 10");
								System.out.println("wood: 5");
								System.out.println("sap: 5");
								System.out.println("stone: 5");
								System.out.println("");
							}

							else if (answer.equals("build") && GoblinActive == true){
								System.out.println("The Goblin is busy (on a mission or building something)");
							}


							System.out.println("What, of those, would you like to build? (Remember, dont use any caps!)");
							System.out.println("If you need to see your resources say resources");
							answer = choice.next();

							if (answer.equals("resources") || answer.equals("Resources") || answer.equals("Stats") || answer.equals("stats")){
								System.out.println("Stone is: " + stone);
								System.out.println("Wood is: " + wood);
								System.out.println("Sap is: " + sap);
								System.out.println("Food is: " + food);
								System.out.println("FoodUse is: " + FoodUse);
								answer = choice.next();
							}
							if (answer.equals("back") || answer.equals("Back")){
								back = true;
							}
							if (answer.equals("upgradedwalls") && UWalls == true && stone >= 10 && sap >= 5){
								stone -= 10;
								sap -= 5;
								UWallsB = true;
								GoblinActive = true;
								GoblinBuildingUWalls = true;
								UWalls = false;
								UWallsDays = 7;
								if (Goblin.getBuilding() <= 4){
									TownBoardDays = TownBoardDays/1;
								}else if (Goblin.getBuilding() <= 7 && Goblin.getBuilding() > 4){
									TownBoardDays = TownBoardDays/2;
								}else if (Goblin.getBuilding() > 7){
									TownBoardDays = TownBoardDays/3;
								}
								DayChoice = false;
								Goblin.setMdays(0);
							}
							if (answer.equals("townboard") && TownBoard == true && wood >= 5 && sap >= 5 && stone >= 5){
								wood -= 5;
								stone -= 5;
								sap -= 5;
								TownBoardB = true;
								GoblinActive = true;
								GoblinBuildingTownBoard = true;
								TownBoard = false;
								TownBoardDays = 5;
								if (Goblin.getBuilding() <= 4){
									TownBoardDays = TownBoardDays/1;
								}else if (Goblin.getBuilding() <= 7 && Goblin.getBuilding() > 4){
									TownBoardDays = TownBoardDays/2;
								}else if (Goblin.getBuilding() > 7){
									TownBoardDays = TownBoardDays/3;
								}
								DayChoice = false;
								Goblin.setMdays(0);
							}
							if  (answer.equals("walls") && Walls == true && wood >= 10 && sap >= 5){
								wood -= 10;
								sap -= 5;
								WallsB = true;
								GoblinActive = true;
								GoblinBuildingWalls = true;
								Walls = false;
								WallsDays = 7;
								if (Goblin.getBuilding() <= 4){
									WallsDays = WallsDays/1;
								}else if (Goblin.getBuilding() <= 7 && Goblin.getBuilding() > 4){
									WallsDays = WallsDays/2;
								}else if (Goblin.getBuilding() > 7){
									WallsDays = WallsDays/3;
								}
								DayChoice = false;
								Goblin.setMdays(0);
							}
							if (answer.equals("townhall") && TownHall == true && wood >= 20 && sap >= 5 && stone >= 10){
								stone -= 10;
								sap -= 5;
								wood -= 20;
								TownHallB = true;
								GoblinActive = true;
								GoblinBuildingTownHall = true;
								TownHall = false;
								TownHallDays = 16;
								if (Goblin.getBuilding() <= 4){
									TownHallDays = TownHallDays/1;
								}else if (Goblin.getBuilding() <= 7 && Goblin.getBuilding() > 4){
									TownHallDays = TownHallDays/2;
								}else if (Goblin.getBuilding() > 7){
									TownHallDays = TownHallDays/3;
								}
								DayChoice = false;
								Goblin.setMdays(0);
							}
							if (answer.equals("granary") && Granary == true && stone >= 15 && sap >= 15){
								System.out.println("you start building your Granary");
								stone -= 15;
								sap -= 15;
								GranaryB = true;
								GoblinActive = true;
								GoblinBuildingGranary = true;
								Granary = false;
								GranaryDays = 12;
								if (Goblin.getBuilding() <= 4){
									GranaryDays = GranaryDays/1;
								}else if (Goblin.getBuilding() <= 7 && Goblin.getBuilding() > 4){
									GranaryDays = GranaryDays/2;
								}else if (Goblin.getBuilding() > 7){
									GranaryDays = GranaryDays/3;
								}
								DayChoice = false;
								Goblin.setMdays(0);
							}
							if (answer.equals("tavern") && Tavern == true && wood >= 15 && stone >= 10 && food >= 5){
								System.out.println("You start building your Tavern");
								wood -= 15;
								stone -= 10;
								TavernB = true;
								GoblinActive = true;
								GoblinBuildingTavern = true;
								Tavern = false;
								TavernDays = 15;
								if (Goblin.getBuilding() <= 4){
									TavernDays = TavernDays/1;
								}else if (Goblin.getBuilding() <= 7 && Goblin.getBuilding() > 4){
									TavernDays = TavernDays/2;
								}else if (Goblin.getBuilding() > 7){
									TavernDays = TavernDays/3;
								}
								DayChoice = false;
								Goblin.setMdays(0);
							}
							if (answer.equals("towncenter") && TownCenter == true && wood > 9 && sap > 4){
								System.out.println("You start building your TownCenter");
								wood -= 10;
								sap -= 5;
								TownCenterB = true;
								GoblinActive = true;
								GoblinBuildingTownCenter = true;
								Goblin.setMdays(0);
								TownCenter = false;
								TownCenterDays = 5;
								if (Goblin.getBuilding() <= 4){
									TownCenterDays = TownCenterDays/1;
								}else if (Goblin.getBuilding() <= 7 && Goblin.getBuilding() > 4){
									TownCenterDays = TownCenterDays/2;
								}else if (Goblin.getBuilding() > 7){
									TownCenterDays = TownCenterDays/3;
								}
								DayChoice = false;
							}
							if (answer.equals("smith") && Smith == true && stone >= 15 && sap >= 5){
								System.out.println("You start building your smith");
								stone -= 15;
								sap -= 5;
								SmithB = true;
								GoblinActive = true;
								GoblinBuildingSmith = true;
								Smith = false;
								Goblin.setMdays(0);
								SmithDays = 9;
								if (Goblin.getBuilding() <= 4){
									SmithDays = SmithDays/1;
								}else if (Goblin.getBuilding() <= 7 && Goblin.getBuilding() > 4){
									SmithDays = SmithDays/2;
								}else if (Goblin.getBuilding() > 7){
									SmithDays = SmithDays/3;
								}
								DayChoice = false;
							}
							if (answer.equals("upgradedfarm") && UFarm == true && wood >= 10 && sap >= 10 && food >= 10){
								System.out.println("You start building your UpgradedFarm");
								food -= 10;
								wood -= 10;
								sap -= 10;
								UFarmB = true;
								GoblinActive = true;
								GoblinBuildingUFarm = true;
								UFarm = false;
								UFarmDays = 12;
								if (Goblin.getBuilding() <= 4){
									UFarmDays = UFarmDays/1;
								}else if (Goblin.getBuilding() <= 7 && Goblin.getBuilding() > 4){
									UFarmDays = UFarmDays/2;
								}else if (Goblin.getBuilding() > 7){
									UFarmDays = UFarmDays/3;
								}
								DayChoice = false;
								Goblin.setMdays(0);
							}
							if (answer.equals("farm") && Farm == true && food >= 5 && stone >= 5){
								System.out.println("You start building a farm");
								food -= 5;
								stone -= 5;
								FarmB = true;
								GoblinBuildingFarm = true;
								GoblinActive = true;
								Farm = false;
								Goblin.setMdays(0);
								FarmDays = 6;
								if (Goblin.getBuilding() <= 4){
									FarmDays = FarmDays/1;
								}else if (Goblin.getBuilding() <= 7 && Goblin.getBuilding() > 4){
									FarmDays = FarmDays/2;
								}else if (Goblin.getBuilding() > 7){
									FarmDays = FarmDays/3;
								}
								DayChoice = false;
							}
							if (answer.equals("habitat") && Habitat == true && wood >= 5 && stone >= 5 && sap >= 5){
								System.out.println("You start building a habitat");
								wood -= 5;
								stone -= 5;
								sap -= 5;
								GoblinBuildingHabitat = true;
								HabitatB = true;
								GoblinActive = true;
								Habitat = false;
								Goblin.setMdays(0);
								HabitatDays = 9;
								if (Goblin.getBuilding() <= 4){
									HabitatDays = HabitatDays/1;
								}else if (Goblin.getBuilding() <= 7 && Goblin.getBuilding() > 4){
									HabitatDays = HabitatDays/2;
								}else if (Goblin.getBuilding() > 7){
									HabitatDays = HabitatDays/3;
								}
								DayChoice = false;
							}
						}
						//------------------------------BUILDING FINISHED-----------------------
						//-----------------------------FOOD-------------------------------------
						if (answer.equals("startfood") && GoblinActive == false){
							Goblin.setMdays(0);
							GoblinFood = true;

							GoblinActive = true;
							DayChoice = false;

						}else if (answer.equals("recall") && GoblinActive == true && GoblinFood == true){
							resources = Goblin.CreatureMission(Goblin.getHunting(), Goblin.getMdays());

							GoblinFood = false;
							Cfood = resources;
							DayChoice = false;
							GoblinActive = false;
						}
						//--------------------------------FOOD END------------------------------

						//---------------------------------STONE--------------------------------
						else if (answer.equals("startstone") && GoblinActive == false){
							Goblin.setMdays(0);
							GoblinStone = true;

							GoblinActive = true;
							DayChoice = false;

						}else if (answer.equals("recall") && GoblinActive == true && GoblinStone == true){
							resources = Goblin.CreatureMission(Goblin.getMining(), Goblin.getMdays());

							GoblinStone = false;
							Cstone = resources;
							DayChoice = false;
							GoblinActive = false;
						}
						//-------------------------------STONE END------------------------------

						//---------------------------------WOOD---------------------------------
						else if (answer.equals("startwood") && GoblinActive == false){
							Goblin.setMdays(0);
							GoblinWood = true;

							GoblinActive = true;
							DayChoice = false;

						}else if (answer.equals("recall") && GoblinActive == true && GoblinWood == true){
							resources = Goblin.CreatureMission(Goblin.getCutting(), Goblin.getMdays());

							GoblinWood = false;
							Cwood = resources;
							DayChoice = false;
							GoblinActive = false;
						}
						//--------------------------------WOOD END------------------------------

						//----------------------------------SAP---------------------------------
						else if (answer.equals("startsap") && GoblinActive == false){
							Goblin.setMdays(0);
							GoblinSap = true;

							GoblinActive = true;
							DayChoice = false;

						}else if (answer.equals("recall") && GoblinActive == true && GoblinSap == true){
							resources = Goblin.CreatureMission(Goblin.getScollecting(), Goblin.getMdays());

							GoblinSap = false;
							Csap = resources;
							DayChoice = false;
							GoblinActive = false;
						}
						//---------------------------------SAP END------------------------------
					}else if (answer.equals("Goblin") && CreatureGoblin == false){
						System.out.println("You dont have a Goblin... how did u get here?");
					}
					//-------------------------------------Goblin END---------------------------
					//---------------------------------MURLOK START-------------------------------------
					if (answer.equals("murlok") && CreatureMurlok == true){
						System.out.println("what would you like to do with the Murlok?");
						System.out.println("You can say 'start(insert what resource you want to get)' or 'defend' or 'build'");
						System.out.println("If you want to recall a to reap your resources say 'recall' (Creature must be active)");
						answer = choice.next();

						if (answer.equals("stats")){
							System.out.println("Hunting: " + Murlok.getHunting());
							System.out.println("Sap Collecting: " + Murlok.getScollecting());
							System.out.println("Mining: " + Murlok.getMining());
							System.out.println("Cutting (wood): " + Murlok.getCutting());
							System.out.println("Defending: " + Murlok.getDefending());
							System.out.println("Building: " + Murlok.getBuilding());
							answer = choice.next();
						}
						//------------------------------DEFENDING-------------------------------
						if (answer.equals("defend") && MurlokActive == false){
							System.out.println("Your Murlok starts defending the camp");
							if (Murlok.getDefending() < 3){
								defense += 1;
								MurlokDefense = 1;
							}else if (Murlok.getDefending() > 3 && Murlok.getDefending() < 7){
								defense += 2;
								MurlokDefense = 2;
							}else{
								defense += 3;
								MurlokDefense = 3;
							}
							MurlokDefend = true;
							MurlokActive = true;
							DayChoice = false;
						}
						if (answer.equals("recall") && MurlokDefend == true && MurlokActive == true){
							defense = defense - MurlokDefense;
							MurlokDefense = 0;
							MurlokActive = false;
							DayChoice = false;
						}
						//-----------------------------DEFENDING END----------------------------
						//------------------------------BUILDING--------------------------------

						if (answer.equals("build") && MurlokActive == false){
							System.out.println("Here is what you can build");
							if (UWalls == true){
								System.out.println("UpgradedWalls");
								System.out.println("days: 7");
								System.out.println("stone: 10");
								System.out.println("sap: 5");
								System.out.println("");
							}
							if (Walls == true){
								System.out.println("Walls");
								System.out.println("days: 7");
								System.out.println("wood: 10");
								System.out.println("sap: 5");
								System.out.println("");
							}
							if (TownBoard == true){
								System.out.println("TownBoard");
								System.out.println("days: 5");
								System.out.println("wood: 5");
								System.out.println("stone: 5");
								System.out.println("sap: 5");
								System.out.println("");
							}
							if (TownHall == true){
								System.out.println("TownHall");
								System.out.println("days: 16");
								System.out.println("wood: 20");
								System.out.println("stone: 10");
								System.out.println("sap: 5");
								System.out.println("");
							}
							if (Granary == true){
								System.out.println("Granary");
								System.out.println("Days: 12");
								System.out.println("Sap: 15");
								System.out.println("Stone: 15");
								System.out.println("");
							}
							if (Tavern == true){
								System.out.println("Tavern");
								System.out.println("days: 15");
								System.out.println("wood: 15");
								System.out.println("stone: 10");
								System.out.println("food: 5");
								System.out.println("");
							}
							if (Smith == true){
								System.out.println("Smith");
								System.out.println("days: 9");
								System.out.println("stone: 15");
								System.out.println("sap: 5");
								System.out.println("");
							}
							if (UFarm == true){
								System.out.println("UpgradedFarm");
								System.out.println("days: 12");
								System.out.println("wood: 10");
								System.out.println("food: 5");
								System.out.println("sap: 10");
								System.out.println("");
							}
							if (TownCenter == true){
								System.out.println("TownCenter");
								System.out.println("days: 5");
								System.out.println("wood: 10");
								System.out.println("sap: 5");
								System.out.println("");
							}
							if (Farm == true){
								System.out.println("Farm");
								System.out.println("days: 6");
								System.out.println("food: 5");
								System.out.println("stone: 5");
								System.out.println("");
							}
							if (Habitat == true){
								System.out.println("Habitat");
								System.out.println("days: 10");
								System.out.println("wood: 5");
								System.out.println("sap: 5");
								System.out.println("stone: 5");
								System.out.println("");
							}

							else if (answer.equals("build") && MurlokActive == true){
								System.out.println("The Murlok is busy (on a mission or building something)");
							}


							System.out.println("What, of those, would you like to build? (Remember, dont use any caps!)");
							System.out.println("If you need to see your resources say resources");
							answer = choice.next();

							if (answer.equals("resources") || answer.equals("Resources") || answer.equals("Stats") || answer.equals("stats")){
								System.out.println("Stone is: " + stone);
								System.out.println("Wood is: " + wood);
								System.out.println("Sap is: " + sap);
								System.out.println("Food is: " + food);
								System.out.println("FoodUse is: " + FoodUse);
								answer = choice.next();
							}
							if (answer.equals("back") || answer.equals("Back")){
								back = true;
							}
							if (answer.equals("upgradedwalls") && UWalls == true && stone >= 10 && sap >= 5){
								stone -= 10;
								sap -= 5;
								UWallsB = true;
								MurlokActive = true;
								MurlokBuildingUWalls = true;
								UWalls = false;
								UWallsDays = 7;
								if (Murlok.getBuilding() <= 4){
									TownBoardDays = TownBoardDays/1;
								}else if (Murlok.getBuilding() <= 7 && Murlok.getBuilding() > 4){
									TownBoardDays = TownBoardDays/2;
								}else if (Murlok.getBuilding() > 7){
									TownBoardDays = TownBoardDays/3;
								}
								DayChoice = false;
								Murlok.setMdays(0);
							}
							if (answer.equals("townboard") && TownBoard == true && wood >= 5 && sap >= 5 && stone >= 5){
								wood -= 5;
								stone -= 5;
								sap -= 5;
								TownBoardB = true;
								MurlokActive = true;
								MurlokBuildingTownBoard = true;
								TownBoard = false;
								TownBoardDays = 5;
								if (Murlok.getBuilding() <= 4){
									TownBoardDays = TownBoardDays/1;
								}else if (Murlok.getBuilding() <= 7 && Murlok.getBuilding() > 4){
									TownBoardDays = TownBoardDays/2;
								}else if (Murlok.getBuilding() > 7){
									TownBoardDays = TownBoardDays/3;
								}
								DayChoice = false;
								Murlok.setMdays(0);
							}
							if  (answer.equals("walls") && Walls == true && wood >= 10 && sap >= 5){
								wood -= 10;
								sap -= 5;
								WallsB = true;
								MurlokActive = true;
								MurlokBuildingWalls = true;
								Walls = false;
								WallsDays = 7;
								if (Murlok.getBuilding() <= 4){
									WallsDays = WallsDays/1;
								}else if (Murlok.getBuilding() <= 7 && Murlok.getBuilding() > 4){
									WallsDays = WallsDays/2;
								}else if (Murlok.getBuilding() > 7){
									WallsDays = WallsDays/3;
								}
								DayChoice = false;
								Murlok.setMdays(0);
							}
							if (answer.equals("townhall") && TownHall == true && wood >= 20 && sap >= 5 && stone >= 10){
								stone -= 10;
								sap -= 5;
								wood -= 20;
								TownHallB = true;
								MurlokActive = true;
								MurlokBuildingTownHall = true;
								TownHall = false;
								TownHallDays = 16;
								if (Murlok.getBuilding() <= 4){
									TownHallDays = TownHallDays/1;
								}else if (Murlok.getBuilding() <= 7 && Murlok.getBuilding() > 4){
									TownHallDays = TownHallDays/2;
								}else if (Murlok.getBuilding() > 7){
									TownHallDays = TownHallDays/3;
								}
								DayChoice = false;
								Murlok.setMdays(0);
							}
							if (answer.equals("granary") && Granary == true && stone >= 15 && sap >= 15){
								System.out.println("you start building your Granary");
								stone -= 15;
								sap -= 15;
								GranaryB = true;
								MurlokActive = true;
								MurlokBuildingGranary = true;
								Granary = false;
								GranaryDays = 12;
								if (Murlok.getBuilding() <= 4){
									GranaryDays = GranaryDays/1;
								}else if (Murlok.getBuilding() <= 7 && Murlok.getBuilding() > 4){
									GranaryDays = GranaryDays/2;
								}else if (Murlok.getBuilding() > 7){
									GranaryDays = GranaryDays/3;
								}
								DayChoice = false;
								Murlok.setMdays(0);
							}
							if (answer.equals("tavern") && Tavern == true && wood >= 15 && stone >= 10 && food >= 5){
								System.out.println("You start building your Tavern");
								wood -= 15;
								stone -= 10;
								TavernB = true;
								MurlokActive = true;
								MurlokBuildingTavern = true;
								Tavern = false;
								TavernDays = 15;
								if (Murlok.getBuilding() <= 4){
									TavernDays = TavernDays/1;
								}else if (Murlok.getBuilding() <= 7 && Murlok.getBuilding() > 4){
									TavernDays = TavernDays/2;
								}else if (Murlok.getBuilding() > 7){
									TavernDays = TavernDays/3;
								}
								DayChoice = false;
								Murlok.setMdays(0);
							}
							if (answer.equals("towncenter") && TownCenter == true && wood > 9 && sap > 4){
								System.out.println("You start building your TownCenter");
								wood -= 10;
								sap -= 5;
								TownCenterB = true;
								MurlokActive = true;
								MurlokBuildingTownCenter = true;
								Murlok.setMdays(0);
								TownCenter = false;
								TownCenterDays = 5;
								if (Murlok.getBuilding() <= 4){
									TownCenterDays = TownCenterDays/1;
								}else if (Murlok.getBuilding() <= 7 && Murlok.getBuilding() > 4){
									TownCenterDays = TownCenterDays/2;
								}else if (Murlok.getBuilding() > 7){
									TownCenterDays = TownCenterDays/3;
								}
								DayChoice = false;
							}
							if (answer.equals("smith") && Smith == true && stone >= 15 && sap >= 5){
								System.out.println("You start building your smith");
								stone -= 15;
								sap -= 5;
								SmithB = true;
								MurlokActive = true;
								MurlokBuildingSmith = true;
								Smith = false;
								Murlok.setMdays(0);
								SmithDays = 9;
								if (Murlok.getBuilding() <= 4){
									SmithDays = SmithDays/1;
								}else if (Murlok.getBuilding() <= 7 && Murlok.getBuilding() > 4){
									SmithDays = SmithDays/2;
								}else if (Murlok.getBuilding() > 7){
									SmithDays = SmithDays/3;
								}
								DayChoice = false;
							}
							if (answer.equals("upgradedfarm") && UFarm == true && wood >= 10 && sap >= 10 && food >= 10){
								System.out.println("You start building your UpgradedFarm");
								food -= 10;
								wood -= 10;
								sap -= 10;
								UFarmB = true;
								MurlokActive = true;
								MurlokBuildingUFarm = true;
								UFarm = false;
								UFarmDays = 12;
								if (Murlok.getBuilding() <= 4){
									UFarmDays = UFarmDays/1;
								}else if (Murlok.getBuilding() <= 7 && Murlok.getBuilding() > 4){
									UFarmDays = UFarmDays/2;
								}else if (Murlok.getBuilding() > 7){
									UFarmDays = UFarmDays/3;
								}
								DayChoice = false;
								Murlok.setMdays(0);
							}
							if (answer.equals("farm") && Farm == true && food >= 5 && stone >= 5){
								System.out.println("You start building a farm");
								food -= 5;
								stone -= 5;
								FarmB = true;
								MurlokBuildingFarm = true;
								MurlokActive = true;
								Farm = false;
								Murlok.setMdays(0);
								FarmDays = 6;
								if (Murlok.getBuilding() <= 4){
									FarmDays = FarmDays/1;
								}else if (Murlok.getBuilding() <= 7 && Murlok.getBuilding() > 4){
									FarmDays = FarmDays/2;
								}else if (Murlok.getBuilding() > 7){
									FarmDays = FarmDays/3;
								}
								DayChoice = false;
							}
							if (answer.equals("habitat") && Habitat == true && wood >= 5 && stone >= 5 && sap >= 5){
								System.out.println("You start building a habitat");
								wood -= 5;
								stone -= 5;
								sap -= 5;
								MurlokBuildingHabitat = true;
								HabitatB = true;
								MurlokActive = true;
								Habitat = false;
								Murlok.setMdays(0);
								HabitatDays = 9;
								if (Murlok.getBuilding() <= 4){
									HabitatDays = HabitatDays/1;
								}else if (Murlok.getBuilding() <= 7 && Murlok.getBuilding() > 4){
									HabitatDays = HabitatDays/2;
								}else if (Murlok.getBuilding() > 7){
									HabitatDays = HabitatDays/3;
								}
								DayChoice = false;
							}
						}
						//------------------------------BUILDING FINISHED-----------------------
						//-----------------------------FOOD-------------------------------------
						if (answer.equals("startfood") && MurlokActive == false){
							Murlok.setMdays(0);
							MurlokFood = true;

							MurlokActive = true;
							DayChoice = false;

						}else if (answer.equals("recall") && MurlokActive == true && MurlokFood == true){
							resources = Murlok.CreatureMission(Murlok.getHunting(), Murlok.getMdays());

							MurlokFood = false;
							Cfood = resources;
							DayChoice = false;
							MurlokActive = false;
						}
						//--------------------------------FOOD END------------------------------

						//---------------------------------STONE--------------------------------
						else if (answer.equals("startstone") && MurlokActive == false){
							Murlok.setMdays(0);
							MurlokStone = true;

							MurlokActive = true;
							DayChoice = false;

						}else if (answer.equals("recall") && MurlokActive == true && MurlokStone == true){
							resources = Murlok.CreatureMission(Murlok.getMining(), Murlok.getMdays());

							MurlokStone = false;
							Cstone = resources;
							DayChoice = false;
							MurlokActive = false;
						}
						//-------------------------------STONE END------------------------------

						//---------------------------------WOOD---------------------------------
						else if (answer.equals("startwood") && MurlokActive == false){
							Murlok.setMdays(0);
							MurlokWood = true;

							MurlokActive = true;
							DayChoice = false;

						}else if (answer.equals("recall") && MurlokActive == true && MurlokWood == true){
							resources = Murlok.CreatureMission(Murlok.getCutting(), Murlok.getMdays());

							MurlokWood = false;
							Cwood = resources;
							DayChoice = false;
							MurlokActive = false;
						}
						//--------------------------------WOOD END------------------------------

						//----------------------------------SAP---------------------------------
						else if (answer.equals("startsap") && MurlokActive == false){
							Murlok.setMdays(0);
							MurlokSap = true;

							MurlokActive = true;
							DayChoice = false;

						}else if (answer.equals("recall") && MurlokActive == true && MurlokSap == true){
							resources = Murlok.CreatureMission(Murlok.getScollecting(), Murlok.getMdays());

							MurlokSap = false;
							Csap = resources;
							DayChoice = false;
							MurlokActive = false;
						}
						//---------------------------------SAP END------------------------------
					}else if (answer.equals("murlok") && CreatureMurlok == false){
						System.out.println("You dont have a murlok... how did u get here?");
					}
					//-------------------------------------MURLOK END---------------------------
					//---------------------------------TURTLE START-------------------------------------
					if (answer.equals("turtle") && CreatureTurtle == true){
						System.out.println("what would you like to do with the turtle?");
						System.out.println("You can say 'start(insert what resource you want to get)' or 'defend' or 'build'");
						System.out.println("If you want to recall a to reap your resources say 'recall' (Creature must be active)");
						answer = choice.next();

						if (answer.equals("stats")){
							System.out.println("Hunting: " + you.getHunting());
							System.out.println("Sap Collecting: " + you.getScollecting());
							System.out.println("Mining: " + you.getMining());
							System.out.println("Cutting (wood): " + you.getCutting());
							System.out.println("Defending: " + you.getDefending());
							System.out.println("Building: " + you.getBuilding());
							answer = choice.next();
						}
						//------------------------------DEFENDING-------------------------------
						if (answer.equals("defend") && TurtleActive == false){
							System.out.println("Your Turtle starts defending the camp");
							if (you.getDefending() < 3){
								defense += 1;
								YouDefense = 1;
							}else if (you.getDefending() > 3 && you.getDefending() < 7){
								defense += 2;
								YouDefense = 2;
							}else{
								defense += 3;
								YouDefense = 3;
							}
							YouDefend = true;
							TurtleActive = true;
							DayChoice = false;
						}
						if (answer.equals("recall") && YouDefend == true && TurtleActive == true){
							defense = defense - YouDefense;
							YouDefense = 0;
							TurtleActive = false;
							DayChoice = false;
						}
						//-----------------------------DEFENDING END----------------------------
						//------------------------------BUILDING--------------------------------
						if (answer.equals("build") && TurtleActive == false){
							System.out.println("Here is what you can build");
							if (UWalls == true){
								System.out.println("UpgradedWalls");
								System.out.println("days: 7");
								System.out.println("stone: 10");
								System.out.println("sap: 5");
								System.out.println("");
							}
							if (Walls == true){
								System.out.println("Walls");
								System.out.println("days: 7");
								System.out.println("wood: 10");
								System.out.println("sap: 5");
								System.out.println("");
							}
							if (TownBoard == true){
								System.out.println("TownBoard");
								System.out.println("days: 5");
								System.out.println("wood: 5");
								System.out.println("stone: 5");
								System.out.println("sap: 5");
								System.out.println("");
							}
							if (TownHall == true){
								System.out.println("TownHall");
								System.out.println("days: 16");
								System.out.println("wood: 20");
								System.out.println("stone: 10");
								System.out.println("sap: 5");
								System.out.println("");
							}
							if (Granary == true){
								System.out.println("Granary");
								System.out.println("Days: 12");
								System.out.println("Sap: 15");
								System.out.println("Stone: 15");
								System.out.println("");
							}
							if (Tavern == true){
								System.out.println("Tavern");
								System.out.println("days: 15");
								System.out.println("wood: 15");
								System.out.println("stone: 10");
								System.out.println("food: 5");
								System.out.println("");
							}
							if (Smith == true){
								System.out.println("Smith");
								System.out.println("days: 9");
								System.out.println("stone: 15");
								System.out.println("sap: 5");
								System.out.println("");
							}
							if (UFarm == true){
								System.out.println("UpgradedFarm");
								System.out.println("days: 12");
								System.out.println("food: 5");
								System.out.println("wood: 10");
								System.out.println("sap: 10");
								System.out.println("");
							}
							if (TownCenter == true){
								System.out.println("TownCenter");
								System.out.println("days: 5");
								System.out.println("wood: 10");
								System.out.println("sap: 5");
								System.out.println("");
							}
							if (Farm == true){
								System.out.println("Farm");
								System.out.println("days: 6");
								System.out.println("food: 5");
								System.out.println("stone: 5");
								System.out.println("");
							}
							if (Habitat == true){
								System.out.println("Habitat");
								System.out.println("days: 10");
								System.out.println("wood: 5");
								System.out.println("sap: 5");
								System.out.println("stone: 5");
								System.out.println("");
							}

							else if (answer.equals("build") && TurtleActive == true){
								System.out.println("The turtle is busy (on a mission or building something)");
							}


							System.out.println("What, of those, would you like to build? (Remember, dont use any caps!)");
							System.out.println("If you need to see your resources say 'resources'");
							answer = choice.next();
							if (answer.equals("resources") || answer.equals("Resources") || answer.equals("Stats") || answer.equals("stats")){
								System.out.println("Stone is: " + stone);
								System.out.println("Wood is: " + wood);
								System.out.println("Sap is: " + sap);
								System.out.println("Food is: " + food);
								System.out.println("FoodUse is: " + FoodUse);
								answer = choice.next();
							}
							if (answer.equals("back") || answer.equals("Back")){
								back = true;
							}
							if (answer.equals("upgradedwalls") && UWalls == true && stone >= 10 && sap >= 5){
								stone -= 10;
								sap -= 5;
								UWallsB = true;
								TurtleActive = true;
								YouBuildingUWalls = true;
								UWalls = false;
								UWallsDays = 7;
								if (you.getBuilding() <= 4){
									TownBoardDays = TownBoardDays/1;
								}else if (you.getBuilding() <= 7 && you.getBuilding() > 4){
									TownBoardDays = TownBoardDays/2;
								}else if (you.getBuilding() > 7){
									TownBoardDays = TownBoardDays/3;
								}
								DayChoice = false;
								you.setMdays(0);
							}
							if (answer.equals("townboard") && TownBoard == true && wood >= 5 && sap >= 5 && stone >= 5){
								wood -= 5;
								stone -= 5;
								sap -= 5;
								TownBoardB = true;
								TurtleActive = true;
								YouBuildingTownBoard = true;
								TownBoard = false;
								TownBoardDays = 5;
								if (you.getBuilding() <= 4){
									TownBoardDays = TownBoardDays/1;
								}else if (you.getBuilding() <= 7 && you.getBuilding() > 4){
									TownBoardDays = TownBoardDays/2;
								}else if (you.getBuilding() > 7){
									TownBoardDays = TownBoardDays/3;
								}
								DayChoice = false;
								you.setMdays(0);
							}
							if  (answer.equals("walls") && Walls == true && wood >= 10 && sap >= 5){
								wood -= 10;
								sap -= 5;
								WallsB = true;
								TurtleActive = true;
								YouBuildingWalls = true;
								Walls = false;
								WallsDays = 7;
								if (you.getBuilding() <= 4){
									WallsDays = WallsDays/1;
								}else if (you.getBuilding() <= 7 && you.getBuilding() > 4){
									WallsDays = WallsDays/2;
								}else if (you.getBuilding() > 7){
									WallsDays = WallsDays/3;
								}
								DayChoice = false;
								you.setMdays(0);
							}
							if (answer.equals("townhall") && TownHall == true && wood >= 20 && sap >= 5 && stone >= 10){
								stone -= 10;
								sap -= 5;
								wood -= 20;
								TownHallB = true;
								TurtleActive = true;
								YouBuildingTownHall = true;
								TownHall = false;
								TownHallDays = 16;
								if (you.getBuilding() <= 4){
									TownHallDays = TownHallDays/1;
								}else if (you.getBuilding() <= 7 && you.getBuilding() > 4){
									TownHallDays = TownHallDays/2;
								}else if (you.getBuilding() > 7){
									TownHallDays = TownHallDays/3;
								}
								DayChoice = false;
								you.setMdays(0);
							}
							if (answer.equals("granary") && Granary == true && stone >= 15 && sap >= 15){
								System.out.println("you start building your Granary");
								stone -= 15;
								sap -= 15;
								GranaryB = true;
								TurtleActive = true;
								YouBuildingGranary = true;
								Granary = false;
								GranaryDays = 12;
								if (you.getBuilding() <= 4){
									GranaryDays = GranaryDays/1;
								}else if (you.getBuilding() <= 7 && you.getBuilding() > 4){
									GranaryDays = GranaryDays/2;
								}else if (you.getBuilding() > 7){
									GranaryDays = GranaryDays/3;
								}
								DayChoice = false;
								you.setMdays(0);
							}
							if (answer.equals("tavern") && Tavern == true && wood >= 15 && stone >= 10 && food >= 5){
								System.out.println("You start building your Tavern");
								wood -= 15;
								stone -= 10;
								TavernB = true;
								TurtleActive = true;
								YouBuildingTavern = true;
								Tavern = false;
								TavernDays = 15;
								if (you.getBuilding() <= 4){
									TavernDays = TavernDays/1;
								}else if (you.getBuilding() <= 7 && you.getBuilding() > 4){
									TavernDays = TavernDays/2;
								}else if (you.getBuilding() > 7){
									TavernDays = TavernDays/3;
								}
								DayChoice = false;
								you.setMdays(0);
							}
							if (answer.equals("towncenter") && TownCenter == true && wood > 9 && sap > 4){
								System.out.println("You start building your TownCenter");
								wood -= 10;
								sap -= 5;
								TownCenterB = true;
								TurtleActive = true;
								YouBuildingTownCenter = true;
								you.setMdays(0);
								TownCenter = false;
								TownCenterDays = 5;
								if (you.getBuilding() <= 4){
									TownCenterDays = TownCenterDays/1;
								}else if (you.getBuilding() <= 7 && you.getBuilding() > 4){
									TownCenterDays = TownCenterDays/2;
								}else if (you.getBuilding() > 7){
									TownCenterDays = TownCenterDays/3;
								}
								DayChoice = false;
							}
							if (answer.equals("smith") && Smith == true && stone >= 15 && sap >= 5){
								System.out.println("You start building your smith");
								stone -= 15;
								sap -= 5;
								SmithB = true;
								TurtleActive = true;
								YouBuildingSmith = true;
								Smith = false;
								you.setMdays(0);
								SmithDays = 9;
								if (you.getBuilding() <= 4){
									SmithDays = SmithDays/1;
								}else if (you.getBuilding() <= 7 && you.getBuilding() > 4){
									SmithDays = SmithDays/2;
								}else if (you.getBuilding() > 7){
									SmithDays = SmithDays/3;
								}
								DayChoice = false;
							}
							if (answer.equals("upgradedfarm") && UFarm == true && wood >= 10 && sap >= 10 && food >= 10){
								System.out.println("You start building your UpgradedFarm");
								food -= 10;
								wood -= 10;
								sap -= 10;
								UFarmB = true;
								TurtleActive = true;
								YouBuildingUFarm = true;
								UFarm = false;
								UFarmDays = 12;
								if (you.getBuilding() <= 4){
									UFarmDays = UFarmDays/1;
								}else if (you.getBuilding() <= 7 && you.getBuilding() > 4){
									UFarmDays = UFarmDays/2;
								}else if (you.getBuilding() > 7){
									UFarmDays = UFarmDays/3;
								}
								DayChoice = false;
								you.setMdays(0);
							}
							if (answer.equals("farm") && Farm == true && food >= 5 && stone >= 5){
								System.out.println("You start building a farm");
								food -= 5;
								stone -= 5;
								FarmB = true;
								YouBuildingFarm = true;
								TurtleActive = true;
								Farm = false;
								you.setMdays(0);
								FarmDays = 6;
								if (you.getBuilding() <= 4){
									FarmDays = FarmDays/1;
								}else if (you.getBuilding() <= 7 && you.getBuilding() > 4){
									FarmDays = FarmDays/2;
								}else if (you.getBuilding() > 7){
									FarmDays = FarmDays/3;
								}
								DayChoice = false;
							}
							if (answer.equals("habitat") && Habitat == true && wood >= 5 && stone >= 5 && sap >= 5){
								System.out.println("You start building a habitat");
								wood -= 5;
								stone -= 5;
								sap -= 5;
								YouBuildingHabitat = true;
								HabitatB = true;
								TurtleActive = true;
								Habitat = false;
								you.setMdays(0);
								HabitatDays = 9;
								if (you.getBuilding() <= 4){
									HabitatDays = HabitatDays/1;
								}else if (you.getBuilding() <= 7 && you.getBuilding() > 4){
									HabitatDays = HabitatDays/2;
								}else if (you.getBuilding() > 7){
									HabitatDays = HabitatDays/3;
								}
								DayChoice = false;
							}
						}
						//------------------------------BUILDING FINISHED-----------------------
						//-----------------------------FOOD-------------------------------------
						if (answer.equals("startfood") && TurtleActive == false){
							you.setMdays(0);
							YouFood = true;

							TurtleActive = true;
							DayChoice = false;

						}else if (answer.equals("recall") && TurtleActive == true && YouFood == true){
							resources = you.CreatureMission(you.getHunting(), you.getMdays());

							YouFood = false;
							Cfood = resources;
							DayChoice = false;
							TurtleActive = false;
						}
						//--------------------------------FOOD END------------------------------

						//---------------------------------STONE--------------------------------
						else if (answer.equals("startstone") && TurtleActive == false){
							you.setMdays(0);
							YouStone = true;

							TurtleActive = true;
							DayChoice = false;

						}else if (answer.equals("recall") && TurtleActive == true && YouStone == true){
							resources = you.CreatureMission(you.getMining(), you.getMdays());

							YouStone = false;
							Cstone = resources;
							DayChoice = false;
							TurtleActive = false;
						}
						//-------------------------------STONE END------------------------------

						//---------------------------------WOOD---------------------------------
						else if (answer.equals("startwood") && TurtleActive == false){
							you.setMdays(0);
							YouWood = true;

							TurtleActive = true;
							DayChoice = false;

						}else if (answer.equals("recall") && TurtleActive == true && YouWood == true){
							resources = you.CreatureMission(you.getCutting(), you.getMdays());

							YouWood = false;
							Cwood = resources;
							DayChoice = false;
							TurtleActive = false;
						}
						//--------------------------------WOOD END------------------------------

						//----------------------------------SAP---------------------------------
						else if (answer.equals("startsap") && TurtleActive == false){
							you.setMdays(0);
							YouSap = true;

							TurtleActive = true;
							DayChoice = false;

						}else if (answer.equals("recall") && TurtleActive == true && YouSap == true){
							resources = you.CreatureMission(you.getScollecting(), you.getMdays());

							YouSap = false;
							Csap = resources;
							DayChoice = false;
							TurtleActive = false;
						}
						//---------------------------------SAP END------------------------------
					}else if (answer.equals("turtle") && CreatureTurtle == false){
						System.out.println("You didn't choose turtle");
					}
					//-------------------------------------TURTLE END---------------------------

					//-------------------------------GROUNDHOG START----------------------------

					if (answer.equals("groundhog") && CreatureGroundhog == true){
						System.out.println("what would you like to do with the Groundhog?");
						answer = choice.next();

						if (answer.equals("stats")){
							System.out.println("Hunting: " + you.getHunting());
							System.out.println("Sap Collecting: " + you.getScollecting());
							System.out.println("Mining: " + you.getMining());
							System.out.println("Cutting (wood): " + you.getCutting());
							System.out.println("Defending: " + you.getDefending());
							System.out.println("Building: " + you.getBuilding());
							answer = choice.next();
						}
						//------------------------------DEFENDING-------------------------------
						if (answer.equals("defend") && GroundhogActive == false){
							System.out.println("Your Groundhog starts defending the camp");
							System.out.println("You can say 'start(insert what resource you want to get)' or 'defend' or 'build'");
							System.out.println("If you want to recall a to reap your resources say 'recall' (Creature must be active)");
							if (you.getDefending() < 3){
								defense += 1;
								YouDefense = 1;
							}else if (you.getDefending() > 3 && you.getDefending() < 7){
								defense += 2;
								YouDefense = 2;
							}else{
								defense += 3;
								YouDefense = 3;
							}
							YouDefend = true;
							GroundhogActive = true;
							DayChoice = false;
						}
						if (answer.equals("recall") && YouDefend == true && GroundhogActive == true){
							defense = defense - YouDefense;
							YouDefense = 0;
							GroundhogActive = false;
							DayChoice = false;
						}
						//-----------------------------DEFENDING END----------------------------
						//------------------------------BUILDING--------------------------------
						//wood: 60, sap: 60, stone: 60
						if (answer.equals("build") && GroundhogActive == false){
							System.out.println("Here is what you can build");
							if (UWalls == true){
								System.out.println("UpgradedWalls");
								System.out.println("days: 7");
								System.out.println("stone: 10");
								System.out.println("sap: 5");
								System.out.println("");
							}
							if (TownBoard == true){
								System.out.println("TownBoard");
								System.out.println("days: 5");
								System.out.println("wood: 5");
								System.out.println("stone: 5");
								System.out.println("sap: 5");
								System.out.println("");
							}
							if (TownHall == true){
								System.out.println("TownHall");
								System.out.println("days: 16");
								System.out.println("wood: 20");
								System.out.println("stone: 10");
								System.out.println("sap: 5");
								System.out.println("");
							}
							if (Granary == true){
								System.out.println("Granary");
								System.out.println("Days: 12");
								System.out.println("Sap: 15");
								System.out.println("Stone: 15");
								System.out.println("");
							}
							if (Tavern == true){
								System.out.println("Tavern");
								System.out.println("days: 15");
								System.out.println("wood: 15");
								System.out.println("stone: 10");
								System.out.println("food: 5");
								System.out.println("");
							}
							if (Smith == true){
								System.out.println("Smith");
								System.out.println("days: 9");
								System.out.println("stone: 15");
								System.out.println("sap: 5");
								System.out.println("");
							}
							if (UFarm == true){
								System.out.println("UpgradedFarm");
								System.out.println("days: 12");
								System.out.println("wood: 10");
								System.out.println("food: 5");
								System.out.println("sap: 10");
								System.out.println("");
							}
							if (TownCenter == true){
								System.out.println("TownCenter");
								System.out.println("days: 5");
								System.out.println("wood: 10");
								System.out.println("sap: 5");
								System.out.println("");
							}
							if (Walls == true){
								System.out.println("Walls");
								System.out.println("days: 7");
								System.out.println("wood: 10");
								System.out.println("sap: 5");
								System.out.println("");
							}
							if (Farm == true){
								System.out.println("Farm");
								System.out.println("days: 6");
								System.out.println("food: 5");
								System.out.println("stone: 5");
								System.out.println("");
							}
							if (Habitat == true){
								System.out.println("Habitat");
								System.out.println("days: 10");
								System.out.println("wood: 5");
								System.out.println("sap: 5");
								System.out.println("stone: 5");
								System.out.println("");
							}

							else if (answer.equals("build") && GroundhogActive == true){
								System.out.println("The groundhog is busy (on a mission or building something)");
							}


							System.out.println("What, of those, would you like to build? (Remember, dont use any caps!)");
							System.out.println("If you dont know what resources you have say 'resources'");
							answer = choice.next();
							if (answer.equals("resources") || answer.equals("Resources") || answer.equals("Stats") || answer.equals("stats")){
								System.out.println("Stone is: " + stone);
								System.out.println("Wood is: " + wood);
								System.out.println("Sap is: " + sap);
								System.out.println("Food is: " + food);
								System.out.println("FoodUse is: " + FoodUse);
								answer = choice.next();
							}
							if (answer.equals("back") || answer.equals("Back")){
								back = true;
							}
							if (answer.equals("upgradedwalls") && UWalls == true && stone >= 10 && sap >= 5){
								stone -= 10;
								sap -= 5;
								UWallsB = true;
								GroundhogActive = true;
								YouBuildingUWalls = true;
								UWalls = false;
								UWallsDays = 7;
								if (you.getBuilding() <= 4){
									TownBoardDays = TownBoardDays/1;
								}else if (you.getBuilding() <= 7 && you.getBuilding() > 4){
									TownBoardDays = TownBoardDays/2;
								}else if (you.getBuilding() > 7){
									TownBoardDays = TownBoardDays/3;
								}
								DayChoice = false;
								you.setMdays(0);
							}
							if (answer.equals("townboard") && TownBoard == true && wood >= 5 && sap >= 5 && stone >= 5){
								wood -= 5;
								stone -= 5;
								sap -= 5;
								TownBoardB = true;
								GroundhogActive = true;
								YouBuildingTownBoard = true;
								TownBoard = false;
								TownBoardDays = 5;
								if (you.getBuilding() <= 4){
									TownBoardDays = TownBoardDays/1;
								}else if (you.getBuilding() <= 7 && you.getBuilding() > 4){
									TownBoardDays = TownBoardDays/2;
								}else if (you.getBuilding() > 7){
									TownBoardDays = TownBoardDays/3;
								}
								DayChoice = false;
								you.setMdays(0);
							}
							if  (answer.equals("walls") && Walls == true && wood >= 10 && sap >= 5){
								wood -= 10;
								sap -= 5;
								WallsB = true;
								GroundhogActive = true;
								YouBuildingWalls = true;
								Walls = false;
								WallsDays = 7;
								if (you.getBuilding() <= 4){
									WallsDays = WallsDays/1;
								}else if (you.getBuilding() <= 7 && you.getBuilding() > 4){
									WallsDays = WallsDays/2;
								}else if (you.getBuilding() > 7){
									WallsDays = WallsDays/3;
								}
								DayChoice = false;
								you.setMdays(0);
							}
							if (answer.equals("townhall") && TownHall == true && wood >= 20 && sap >= 5 && stone >= 10){
								stone -= 10;
								sap -= 5;
								wood -= 20;
								TownHallB = true;
								GroundhogActive = true;
								YouBuildingTownHall = true;
								TownHall = false;
								TownHallDays = 16;
								if (you.getBuilding() <= 4){
									TownHallDays = TownHallDays/1;
								}else if (you.getBuilding() <= 7 && you.getBuilding() > 4){
									TownHallDays = TownHallDays/2;
								}else if (you.getBuilding() > 7){
									TownHallDays = TownHallDays/3;
								}
								DayChoice = false;
								you.setMdays(0);
							}
							if (answer.equals("granary") && Granary == true && stone >= 15 && sap >= 15){
								System.out.println("you start building your Granary");
								stone -= 15;
								sap -= 15;
								GranaryB = true;
								GroundhogActive = true;
								YouBuildingGranary = true;
								Granary = false;
								GranaryDays = 12;
								if (you.getBuilding() <= 4){
									GranaryDays = GranaryDays/1;
								}else if (you.getBuilding() <= 7 && you.getBuilding() > 4){
									GranaryDays = GranaryDays/2;
								}else if (you.getBuilding() > 7){
									GranaryDays = GranaryDays/3;
								}
								DayChoice = false;
								you.setMdays(0);
							}
							if (answer.equals("tavern") && Tavern == true && wood >= 15 && stone >= 10 && food >= 5){
								System.out.println("You start building your Tavern");
								wood -= 15;
								stone -= 10;
								TavernB = true;
								GroundhogActive = true;
								YouBuildingTavern = true;
								Tavern = false;
								TavernDays = 15;
								if (you.getBuilding() <= 4){
									TavernDays = TavernDays/1;
								}else if (you.getBuilding() <= 7 && you.getBuilding() > 4){
									TavernDays = TavernDays/2;
								}else if (you.getBuilding() > 7){
									TavernDays = TavernDays/3;
								}
								DayChoice = false;
								you.setMdays(0);
							}
							if (answer.equals("towncenter") && TownCenter == true && wood > 9 && sap > 4){
								System.out.println("You start building your TownCenter");
								wood -= 10;
								sap -= 5;
								TownCenterB = true;
								GroundhogActive = true;
								YouBuildingTownCenter = true;
								you.setMdays(0);
								TownCenter = false;
								TownCenterDays = 5;
								if (you.getBuilding() <= 4){
									TownCenterDays = TownCenterDays/1;
								}else if (you.getBuilding() <= 7 && you.getBuilding() > 4){
									TownCenterDays = TownCenterDays/2;
								}else if (you.getBuilding() > 7){
									TownCenterDays = TownCenterDays/3;
								}
								DayChoice = false;
							}
							if (answer.equals("smith") && Smith == true && stone >= 15 && sap >= 5){
								System.out.println("You start building your smith");
								stone -= 15;
								sap -= 5;
								SmithB = true;
								GroundhogActive = true;
								YouBuildingSmith = true;
								Smith = false;
								you.setMdays(0);
								SmithDays = 9;
								if (you.getBuilding() <= 4){
									SmithDays = SmithDays/1;
								}else if (you.getBuilding() <= 7 && you.getBuilding() > 4){
									SmithDays = SmithDays/2;
								}else if (you.getBuilding() > 7){
									SmithDays = SmithDays/3;
								}
								DayChoice = false;
							}
							if (answer.equals("upgradedfarm") && UFarm == true && wood >= 10 && sap >= 10 && food >= 10){
								System.out.println("You start building your UpgradedFarm");
								food -= 10;
								wood -= 10;
								sap -= 10;
								UFarmB = true;
								GroundhogActive = true;
								YouBuildingUFarm = true;
								UFarm = false;
								UFarmDays = 12;
								if (you.getBuilding() <= 4){
									UFarmDays = UFarmDays/1;
								}else if (you.getBuilding() <= 7 && you.getBuilding() > 4){
									UFarmDays = UFarmDays/2;
								}else if (you.getBuilding() > 7){
									UFarmDays = UFarmDays/3;
								}
								DayChoice = false;
								you.setMdays(0);
							}
							if (answer.equals("farm") && Farm == true && food >= 5 && stone >= 5){
								System.out.println("You start building a farm");
								food -= 5;
								stone -= 5;
								FarmB = true;
								YouBuildingFarm = true;
								GroundhogActive = true;
								Farm = false;
								you.setMdays(0);
								FarmDays = 6;
								if (you.getBuilding() <= 4){
									FarmDays = FarmDays/1;
								}else if (you.getBuilding() <= 7 && you.getBuilding() > 4){
									FarmDays = FarmDays/2;
								}else if (you.getBuilding() > 7){
									FarmDays = FarmDays/3;
								}
								DayChoice = false;
							}
							if (answer.equals("habitat") && Habitat == true && wood >= 5 && stone >= 5 && sap >= 5){
								System.out.println("You start building a habitat");
								wood -= 5;
								stone -= 5;
								sap -= 5;
								YouBuildingHabitat = true;
								HabitatB = true;
								GroundhogActive = true;
								Habitat = false;
								you.setMdays(0);
								HabitatDays = 9;
								if (you.getBuilding() <= 4){
									HabitatDays = HabitatDays/1;
								}else if (you.getBuilding() <= 7 && you.getBuilding() > 4){
									HabitatDays = HabitatDays/2;
								}else if (you.getBuilding() > 7){
									HabitatDays = HabitatDays/3;
								}
								DayChoice = false;
							}
						}
						//------------------------------BUILDING FINISHED-----------------------
						//-----------------------------FOOD-------------------------------------
						if (answer.equals("startfood") && GroundhogActive == false){
							you.setMdays(0);
							YouFood = true;

							GroundhogActive = true;
							DayChoice = false;

						}else if (answer.equals("recall") && GroundhogActive == true && YouFood == true){
							resources = you.CreatureMission(you.getHunting(), you.getMdays());

							YouFood = false;
							Cfood = resources;
							DayChoice = false;
							GroundhogActive = false;
						}
						//--------------------------------FOOD END------------------------------

						//---------------------------------STONE--------------------------------
						else if (answer.equals("startstone") && GroundhogActive == false){
							you.setMdays(0);
							YouStone = true;

							GroundhogActive = true;
							DayChoice = false;

						}else if (answer.equals("recall") && GroundhogActive == true && YouStone == true){
							resources = you.CreatureMission(you.getMining(), you.getMdays());

							YouStone = false;
							Cstone = resources;
							DayChoice = false;
							GroundhogActive = false;
						}
						//-------------------------------STONE END------------------------------

						//---------------------------------WOOD---------------------------------
						else if (answer.equals("startwood") && GroundhogActive == false){
							you.setMdays(0);
							YouWood = true;

							GroundhogActive = true;
							DayChoice = false;

						}else if (answer.equals("recall") && GroundhogActive == true && YouWood == true){
							resources = you.CreatureMission(you.getCutting(), you.getMdays());

							YouWood = false;
							Cwood = resources;
							DayChoice = false;
							GroundhogActive = false;
						}
						//--------------------------------WOOD END------------------------------

						//----------------------------------SAP---------------------------------
						else if (answer.equals("startsap") && GroundhogActive == false){
							you.setMdays(0);
							YouSap = true;

							GroundhogActive = true;
							DayChoice = false;

						}else if (answer.equals("recall") && GroundhogActive == true && YouSap == true){
							resources = you.CreatureMission(you.getScollecting(), you.getMdays());

							YouSap = false;
							Csap = resources;
							DayChoice = false;
							GroundhogActive = false;
						}
						//---------------------------------SAP END------------------------------
					}else if (answer.equals("groundhog") && CreatureGroundhog == false){
						System.out.println("You didn't choose groundhog at the start");
					}
					//-------------------------------GROUNDHOG END-----------------------------------

					//---------------------------------MEERKAT START-------------------------------------
					if (answer.equals("meerkat") && CreatureMeerkat == true){
						System.out.println("what would you like to do with the meerkat?");
						System.out.println("You can say 'start(insert what resource you want to get)' or 'defend' or 'build'");
						System.out.println("If you want to recall a to reap your resources say 'recall' (Creature must be active)");
						answer = choice.next();

						if (answer.equals("stats")){
							System.out.println("Hunting: " + you.getHunting());
							System.out.println("Sap Collecting: " + you.getScollecting());
							System.out.println("Mining: " + you.getMining());
							System.out.println("Cutting (wood): " + you.getCutting());
							System.out.println("Defending: " + you.getDefending());
							System.out.println("Building: " + you.getBuilding());
							answer = choice.next();
						}
						//------------------------------DEFENDING-------------------------------
						if (answer.equals("defend") && MeerkatActive == false){
							System.out.println("Your Meerkat starts defending the camp");
							
							if (you.getDefending() < 3){
								defense += 1;
								YouDefense = 1;
							}else if (you.getDefending() > 3 && you.getDefending() < 7){
								defense += 2;
								YouDefense = 2;
							}else{
								defense += 3;
								YouDefense = 3;
							}
							YouDefend = true;
							MeerkatActive = true;
							DayChoice = false;
						}
						if (answer.equals("recall") && YouDefend == true && MeerkatActive == true){
							defense = defense - YouDefense;
							YouDefense = 0;
							MeerkatActive = false;
							DayChoice = false;
						}
						//-----------------------------DEFENDING END----------------------------
						//------------------------------BUILDING--------------------------------

						if (answer.equals("build") && MeerkatActive == false){
							System.out.println("Here is what you can build");
							if (UWalls == true){
								System.out.println("UpgradedWalls");
								System.out.println("days: 7");
								System.out.println("stone: 10");
								System.out.println("sap: 5");
								System.out.println("");
							}
							if (Walls == true){
								System.out.println("Walls");
								System.out.println("days: 7");
								System.out.println("wood: 10");
								System.out.println("sap: 5");
								System.out.println("");
							}
							if (TownBoard == true){
								System.out.println("TownBoard");
								System.out.println("days: 5");
								System.out.println("wood: 5");
								System.out.println("stone: 5");
								System.out.println("sap: 5");
								System.out.println("");
							}
							if (TownHall == true){
								System.out.println("TownHall");
								System.out.println("days: 16");
								System.out.println("wood: 20");
								System.out.println("stone: 10");
								System.out.println("sap: 5");
								System.out.println("");
							}
							if (Granary == true){
								System.out.println("Granary");
								System.out.println("days: 12");
								System.out.println("sap: 15");
								System.out.println("stone: 15");
								System.out.println("");
							}
							if (Tavern == true){
								System.out.println("Tavern");
								System.out.println("days: 15");
								System.out.println("wood: 15");
								System.out.println("stone: 10");
								System.out.println("food: 5");
								System.out.println("");
							}
							if (Smith == true){
								System.out.println("Smith");
								System.out.println("days: 9");
								System.out.println("stone: 15");
								System.out.println("sap: 5");
								System.out.println("");
							}
							if (UFarm == true){
								System.out.println("UpgradedFarm");
								System.out.println("days: 12");
								System.out.println("wood: 10");
								System.out.println("food: 5");
								System.out.println("sap: 10");
								System.out.println("");
							}
							if (TownCenter == true){
								System.out.println("TownCenter");
								System.out.println("days: 5");
								System.out.println("wood: 10");
								System.out.println("sap: 5");
								System.out.println("");
							}
							if (Farm == true){
								System.out.println("Farm");
								System.out.println("days: 6");
								System.out.println("food: 5");
								System.out.println("stone: 5");
								System.out.println("");
							}
							if (Habitat == true){
								System.out.println("Habitat");
								System.out.println("days: 10");
								System.out.println("wood: 5");
								System.out.println("sap: 5");
								System.out.println("stone: 5");
								System.out.println("");
							}

							else if (answer.equals("build") && MeerkatActive == true){
								System.out.println("The meerkat is busy (on a mission or building something)");
							}


							System.out.println("What, of those, would you like to build? (Remember, dont use any caps!)");
							System.out.println("If you need to see your resources say 'resources'");
							answer = choice.next();
							if (answer.equals("resources") || answer.equals("Resources") || answer.equals("Stats") || answer.equals("stats")){
								System.out.println("Stone is: " + stone);
								System.out.println("Wood is: " + wood);
								System.out.println("Sap is: " + sap);
								System.out.println("Food is: " + food);
								System.out.println("FoodUse is: " + FoodUse);
								answer = choice.next();
							}
							if (answer.equals("back") || answer.equals("Back")){
								back = true;
							}
							if (answer.equals("upgradedwalls") && UWalls == true && stone >= 10 && sap >= 5){
								stone -= 10;
								sap -= 5;
								UWallsB = true;
								MeerkatActive = true;
								YouBuildingUWalls = true;
								UWalls = false;
								UWallsDays = 7;
								if (you.getBuilding() <= 4){
									TownBoardDays = TownBoardDays/1;
								}else if (you.getBuilding() <= 7 && you.getBuilding() > 4){
									TownBoardDays = TownBoardDays/2;
								}else if (you.getBuilding() > 7){
									TownBoardDays = TownBoardDays/3;
								}
								DayChoice = false;
								you.setMdays(0);
							}
							if (answer.equals("townboard") && TownBoard == true && wood >= 5 && sap >= 5 && stone >= 5){
								wood -= 5;
								stone -= 5;
								sap -= 5;
								TownBoardB = true;
								MeerkatActive = true;
								YouBuildingTownBoard = true;
								TownBoard = false;
								TownBoardDays = 5;
								if (you.getBuilding() <= 4){
									TownBoardDays = TownBoardDays/1;
								}else if (you.getBuilding() <= 7 && you.getBuilding() > 4){
									TownBoardDays = TownBoardDays/2;
								}else if (you.getBuilding() > 7){
									TownBoardDays = TownBoardDays/3;
								}
								DayChoice = false;
								you.setMdays(0);
							}
							if  (answer.equals("walls") && Walls == true && wood >= 10 && sap >= 5){
								wood -= 10;
								sap -= 5;
								WallsB = true;
								MeerkatActive = true;
								YouBuildingWalls = true;
								Walls = false;
								WallsDays = 7;
								if (you.getBuilding() <= 4){
									WallsDays = WallsDays/1;
								}else if (you.getBuilding() <= 7 && you.getBuilding() > 4){
									WallsDays = WallsDays/2;
								}else if (you.getBuilding() > 7){
									WallsDays = WallsDays/3;
								}
								DayChoice = false;
								you.setMdays(0);
							}
							if (answer.equals("townhall") && TownHall == true && wood >= 20 && sap >= 5 && stone >= 10){
								stone -= 10;
								sap -= 5;
								wood -= 20;
								TownHallB = true;
								MeerkatActive = true;
								YouBuildingTownHall = true;
								TownHall = false;
								TownHallDays = 16;
								if (you.getBuilding() <= 4){
									TownHallDays = TownHallDays/1;
								}else if (you.getBuilding() <= 7 && you.getBuilding() > 4){
									TownHallDays = TownHallDays/2;
								}else if (you.getBuilding() > 7){
									TownHallDays = TownHallDays/3;
								}
								DayChoice = false;
								you.setMdays(0);
							}
							if (answer.equals("granary") && Granary == true && stone >= 15 && sap >= 15){
								System.out.println("you start building your Granary");
								stone -= 15;
								sap -= 15;
								GranaryB = true;
								MeerkatActive = true;
								YouBuildingGranary = true;
								Granary = false;
								GranaryDays = 12;
								if (you.getBuilding() <= 4){
									GranaryDays = GranaryDays/1;
								}else if (you.getBuilding() <= 7 && you.getBuilding() > 4){
									GranaryDays = GranaryDays/2;
								}else if (you.getBuilding() > 7){
									GranaryDays = GranaryDays/3;
								}
								DayChoice = false;
								you.setMdays(0);
							}
							if (answer.equals("tavern") && Tavern == true && wood >= 15 && stone >= 10 && food >= 5){
								System.out.println("You start building your Tavern");
								wood -= 15;
								stone -= 10;
								TavernB = true;
								MeerkatActive = true;
								YouBuildingTavern = true;
								Tavern = false;
								TavernDays = 15;
								if (you.getBuilding() <= 4){
									TavernDays = TavernDays/1;
								}else if (you.getBuilding() <= 7 && you.getBuilding() > 4){
									TavernDays = TavernDays/2;
								}else if (you.getBuilding() > 7){
									TavernDays = TavernDays/3;
								}
								DayChoice = false;
								you.setMdays(0);
							}
							if (answer.equals("towncenter") && TownCenter == true && wood > 9 && sap > 4){
								System.out.println("You start building your TownCenter");
								wood -= 10;
								sap -= 5;
								TownCenterB = true;
								MeerkatActive = true;
								YouBuildingTownCenter = true;
								you.setMdays(0);
								TownCenter = false;
								TownCenterDays = 5;
								if (you.getBuilding() <= 4){
									TownCenterDays = TownCenterDays/1;
								}else if (you.getBuilding() <= 7 && you.getBuilding() > 4){
									TownCenterDays = TownCenterDays/2;
								}else if (you.getBuilding() > 7){
									TownCenterDays = TownCenterDays/3;
								}
								DayChoice = false;
							}
							if (answer.equals("smith") && Smith == true && stone >= 15 && sap >= 5){
								System.out.println("You start building your smith");
								stone -= 15;
								sap -= 5;
								SmithB = true;
								MeerkatActive = true;
								YouBuildingSmith = true;
								Smith = false;
								you.setMdays(0);
								SmithDays = 9;
								if (you.getBuilding() <= 4){
									SmithDays = SmithDays/1;
								}else if (you.getBuilding() <= 7 && you.getBuilding() > 4){
									SmithDays = SmithDays/2;
								}else if (you.getBuilding() > 7){
									SmithDays = SmithDays/3;
								}
								DayChoice = false;
							}
							if (answer.equals("upgradedfarm") && UFarm == true && wood >= 10 && sap >= 10 && food >= 10){
								System.out.println("You start building your UpgradedFarm");
								food -= 10;
								wood -= 10;
								sap -= 10;
								UFarmB = true;
								MeerkatActive = true;
								YouBuildingUFarm = true;
								UFarm = false;
								UFarmDays = 12;
								if (you.getBuilding() <= 4){
									UFarmDays = UFarmDays/1;
								}else if (you.getBuilding() <= 7 && you.getBuilding() > 4){
									UFarmDays = UFarmDays/2;
								}else if (you.getBuilding() > 7){
									UFarmDays = UFarmDays/3;
								}
								DayChoice = false;
								you.setMdays(0);
							}
							if (answer.equals("farm") && Farm == true && food >= 5 && stone >= 5){
								System.out.println("You start building a farm");
								food -= 5;
								stone -= 5;
								FarmB = true;
								YouBuildingFarm = true;
								MeerkatActive = true;
								Farm = false;
								you.setMdays(0);
								FarmDays = 6;
								if (you.getBuilding() <= 4){
									FarmDays = FarmDays/1;
								}else if (you.getBuilding() <= 7 && you.getBuilding() > 4){
									FarmDays = FarmDays/2;
								}else if (you.getBuilding() > 7){
									FarmDays = FarmDays/3;
								}
								DayChoice = false;
							}
							if (answer.equals("habitat") && Habitat == true && wood >= 5 && stone >= 5 && sap >= 5){
								System.out.println("You start building a habitat");
								wood -= 5;
								stone -= 5;
								sap -= 5;
								YouBuildingHabitat = true;
								HabitatB = true;
								MeerkatActive = true;
								Habitat = false;
								you.setMdays(0);
								HabitatDays = 9;
								if (you.getBuilding() <= 4){
									HabitatDays = HabitatDays/1;
								}else if (you.getBuilding() <= 7 && you.getBuilding() > 4){
									HabitatDays = HabitatDays/2;
								}else if (you.getBuilding() > 7){
									HabitatDays = HabitatDays/3;
								}
								DayChoice = false;
							}
						}
						//------------------------------BUILDING FINISHED-----------------------
						//-----------------------------FOOD-------------------------------------
						if (answer.equals("startfood") && MeerkatActive == false){
							you.setMdays(0);
							YouFood = true;

							MeerkatActive = true;
							DayChoice = false;

						}else if (answer.equals("recall") && MeerkatActive == true && YouFood == true){
							resources = you.CreatureMission(you.getHunting(), you.getMdays());

							YouFood = false;
							Cfood = resources;
							DayChoice = false;
							MeerkatActive = false;
						}
						//--------------------------------FOOD END------------------------------

						//---------------------------------STONE--------------------------------
						else if (answer.equals("startstone") && MeerkatActive == false){
							you.setMdays(0);
							YouStone = true;

							MeerkatActive = true;
							DayChoice = false;

						}else if (answer.equals("recall") && MeerkatActive == true && YouStone == true){
							resources = you.CreatureMission(you.getMining(), you.getMdays());

							YouStone = false;
							Cstone = resources;
							DayChoice = false;
							MeerkatActive = false;
						}
						//-------------------------------STONE END------------------------------

						//---------------------------------WOOD---------------------------------
						else if (answer.equals("startwood") && MeerkatActive == false){
							you.setMdays(0);
							YouWood = true;

							MeerkatActive = true;
							DayChoice = false;

						}else if (answer.equals("recall") && MeerkatActive == true && YouWood == true){
							resources = you.CreatureMission(you.getCutting(), you.getMdays());

							YouWood = false;
							Cwood = resources;
							DayChoice = false;
							MeerkatActive = false;
						}
						//--------------------------------WOOD END------------------------------

						//----------------------------------SAP---------------------------------
						else if (answer.equals("startsap") && MeerkatActive == false){
							you.setMdays(0);
							YouSap = true;

							MeerkatActive = true;
							DayChoice = false;

						}else if (answer.equals("recall") && MeerkatActive == true && YouSap == true){
							resources = you.CreatureMission(you.getScollecting(), you.getMdays());

							YouSap = false;
							Csap = resources;
							DayChoice = false;
							MeerkatActive = false;
						}
						//---------------------------------SAP END------------------------------
					}else if (answer.equals("meerkat") && CreatureMeerkat == false){
						System.out.println("You didn't choose meerkat");
					}
					//-----------------------------------MEERKAT END----------------------------

					else if (DayChoice == true){
						System.out.println("Remember, dont use any caps when saying anything here, so say like 'turtle' or 'startfood' etc.");
					}
				}


				//explore
				if (answer.equals("explore") || answer.equals("Explore")){
					double ExploreScript = (int)(Math.random()* 11);

					if (ExploreScript == 0){
						System.out.println("You wonder apon an old cottage, long since abandoned. +5 wood");
						wood += 5;

						DayChoice = false;
					}else if (ExploreScript == 1){
						System.out.println("You wonder apon an old mineshaft, long since abandoned. +5 stone");
						stone += 5;

						DayChoice = false;
					}else if (ExploreScript == 2){
						System.out.println("You Stumble into a giant tree, dripping with sap. +5 sap");
						sap += 5;

						DayChoice = false;
					}else if (ExploreScript == 3){
						System.out.println("You hunt a bit, and catch some meat. +5 food");
						food = food + 5;


						DayChoice = false;
					}else if (ExploreScript == 4 && WallsU == false){
						System.out.println("You meet an old guard, he teaches you how to make a suitable wall for defending");
						WallsU = true;
						Walls = true;
						DayChoice = false;

					}else if (ExploreScript == 4 && WallsU == true){
						System.out.println("You find an abandoned wagon full of goods, +2 to all resources");
						wood += 2;
						sap +=2;
						stone += 2;
						food += 2;
						DayChoice = false;
					}
					if (ExploreScript == 5){
						System.out.println("You see a fallen tree, and collect what remains. +8 wood");
						wood += 8;

						DayChoice = false;
					}else if (ExploreScript == 6){
						System.out.println("You find a very round boulder, and roll it back to camp. +8 stone");
						stone += 8;

						DayChoice = false;
					}else if (ExploreScript == 7){
						System.out.println("You Stumble into a sap forest, you collect some. +8 sap");
						sap += 8;

						DayChoice = false;
					}else if (ExploreScript == 8){
						System.out.println("You find some mushrooms. +8 food");
						food = food + 7;


						DayChoice = false;
					}

					else if (ExploreScript == 9 && WallsU == false){
						System.out.println("You meet an old guard, he teaches you how to make a suitable wall for defending");
						WallsU = true;
						Walls = true;
						DayChoice = false;

					}else if (ExploreScript == 9 && WallsU == true){
						System.out.println("You find an abandoned wagon full of goods, +2 to all resources");
						wood += 2;
						sap +=2;
						stone += 2;
						food += 2;
						DayChoice = false;
					}
					else if (ExploreScript == 10 && CreatureHoblehead == false){
						System.out.println("You find a Hoblehead and take it home. it uses 1 food a day");
						CreatureHoblehead = true;
						FoodUse += 1;
						creatures += 1;
						DayChoice = false;
					}
					else if (ExploreScript == 10 && CreatureHoblehead == true){
						System.out.println("You trade with a man you find for some resources. +3 everything");
						wood += 3;
						stone += 3;
						sap += 3;
						food += 3;
						DayChoice = false;
					}
				}


				
				if (DayChoice == true && back == false){
					System.out.println("Say help if you need help knowing about stuff");
				}
				if (back == true){
					System.out.println("you went back to the starting selection");
					System.out.println("");
					back = false;
				}

				if (Csap > 0){
					System.out.println("One of your creatures comes back with " + Csap + " sap");
					sap = sap + Csap;
					Csap = 0;
				}
				if (Cwood > 0){
					System.out.println("One of your creatures comes back with " + Cwood + " wood");
					wood = wood + Cwood;
					Cwood = 0;
				}
				if (Cstone > 0){
					System.out.println("One of your creatures comes back with " + Cstone + " stone");
					stone = stone + Cstone;
					Cstone = 0;
				}
				if (Cfood > 0){
					System.out.println("One of your creatures comes back with " + Cfood + " food");
					food = food + Cfood;
					Cfood = 0;
				}

				if (UWallsB == true && UWallsDays <= 0){
					System.out.println("");
					System.out.println("The UpgradedWalls are complete");
					System.out.println("Our defense will be much higher now");
					System.out.println("");
					defense += 2;
					UWallsB = false;
					UWalls = false;
					UWallsF = true;
					if (YouBuildingUWalls == true){
						YouBuildingUWalls = false;
						TurtleActive = false;
						MeerkatActive = false;
						GroundhogActive = false;
					}
					if (MurlokBuildingUWalls == true){
						MurlokBuildingUWalls = false;
						MurlokActive = false;
					}
					if (GoblinBuildingUWalls == true){
						GoblinBuildingUWalls = false;
						GoblinActive = false;
					}
					if (WhelpBuildingUWalls == true){
						WhelpBuildingUWalls = false;
						WhelpActive = false;
					}
					if (BristleBuildingUWalls == true){
						BristleBuildingUWalls = false;
						BristleActive = false;
					}
					if (KnarlBuildingUWalls == true){
						KnarlBuildingUWalls = false;
						KnarlActive = false;
					}
					if (DuckBuildingUWalls == true){
						DuckBuildingUWalls = false;
						DuckActive = false;
					}
					if (BasiliskBuildingUWalls == true){
						BasiliskBuildingUWalls = false;
						BasiliskActive = false;
					}
					if (HobleheadBuildingUWalls == true){
						HobleheadBuildingUWalls = false;
						HobleheadActive = false;
					}
				}
				if (WallsB == true && WallsDays <= 0){
					System.out.println("");
					System.out.println("The walls are complete");
					System.out.println("In 10 days we can add stone to make the walls even more powerful, for now we must let the sap harden");
					System.out.println("");
					defense += 2;
					WallsB = false;
					Walls = false;
					WallsF = true;
					UWallsWait = true;
					if (YouBuildingWalls == true){
						YouBuildingWalls = false;
						TurtleActive = false;
						MeerkatActive = false;
						GroundhogActive = false;
					}
					if (MurlokBuildingWalls == true){
						MurlokBuildingWalls = false;
						MurlokActive = false;
					}
					if (GoblinBuildingWalls == true){
						GoblinBuildingWalls = false;
						GoblinActive = false;
					}
					if (WhelpBuildingWalls == true){
						WhelpBuildingWalls = false;
						WhelpActive = false;
					}
					if (BristleBuildingWalls == true){
						BristleBuildingWalls = false;
						BristleActive = false;
					}
					if (KnarlBuildingWalls == true){
						KnarlBuildingWalls = false;
						KnarlActive = false;
					}
					if (DuckBuildingWalls == true){
						DuckBuildingWalls = false;
						DuckActive = false;
					}
					if (BasiliskBuildingWalls == true){
						BasiliskBuildingWalls = false;
						BasiliskActive = false;
					}
					if (HobleheadBuildingWalls == true){
						HobleheadBuildingWalls = false;
						HobleheadActive = false;
					}
				}
				if (TownBoardB == true && TownBoardDays <= 0){
					System.out.println("");
					System.out.println("The TownBoard is complete");
					System.out.println("We can now purchase things for our civilization, you can do this by saying 'shop'");
					System.out.println("");
					shop = true;
					TownBoardB = false;
					TownBoard = false;
					TownBoardF = true;
					if (YouBuildingTownBoard == true){
						YouBuildingTownBoard = false;
						TurtleActive = false;
						MeerkatActive = false;
						GroundhogActive = false;
					}
					if (MurlokBuildingTownBoard == true){
						MurlokBuildingTownBoard = false;
						MurlokActive = false;
					}
					if (GoblinBuildingTownBoard == true){
						GoblinBuildingTownBoard = false;
						GoblinActive = false;
					}
					if (WhelpBuildingTownBoard == true){
						WhelpBuildingTownBoard = false;
						WhelpActive = false;
					}
					if (BristleBuildingTownBoard == true){
						BristleBuildingTownBoard = false;
						BristleActive = false;
					}
					if (KnarlBuildingTownBoard == true){
						KnarlBuildingTownBoard = false;
						KnarlActive = false;
					}
					if (DuckBuildingTownBoard == true){
						DuckBuildingTownBoard = false;
						DuckActive = false;
					}
					if (BasiliskBuildingTownBoard == true){
						BasiliskBuildingTownBoard = false;
						BasiliskActive = false;
					}
					if (HobleheadBuildingTownBoard == true){
						HobleheadBuildingTownBoard = false;
						HobleheadActive = false;
					}
				}
				if (TownHallB == true && TownHallDays <= 0){
					System.out.println("");
					System.out.println("The TownHall is complete!");
					System.out.println("We completed our civilization, this will majorly help the critics final score of the town");
					System.out.println("");
					TownHallB = false;
					TownHallF = true;
					if (YouBuildingTownHall == true){
						YouBuildingTownHall = false;
						TurtleActive = false;
						MeerkatActive = false;
						GroundhogActive = false;
					}
					if (MurlokBuildingTownHall == true){
						MurlokBuildingTownHall = false;
						MurlokActive = false;
					}
					if (GoblinBuildingTownHall == true){
						GoblinBuildingTownHall = false;
						GoblinActive = false;
					}
					if (WhelpBuildingTownHall == true){
						WhelpBuildingTownHall = false;
						WhelpActive = false;
					}
					if (BristleBuildingTownHall == true){
						BristleBuildingTownHall = false;
						BristleActive = false;
					}
					if (KnarlBuildingTownHall == true){
						KnarlBuildingTownHall = false;
						KnarlActive = false;
					}
					if (DuckBuildingTownHall == true){
						DuckBuildingTownHall = false;
						DuckActive = false;
					}
					if (BasiliskBuildingTownHall == true){
						BasiliskBuildingTownHall = false;
						BasiliskActive = false;
					}
					if (HobleheadBuildingTownHall == true){
						HobleheadBuildingTownHall = false;
						HobleheadActive = false;
					}
				}
				if (TownCenterB == true && TownCenterDays <= 0){
					System.out.println("");
					System.out.println("The TownCenter is complete!");
					System.out.println("With this we can branch out and start creating our civilization");
					System.out.println("");
					TownCenterB = false;
					TownCenterF = true;
					Farm = true;
					Habitat = true;
					Smith = true;
					if (YouBuildingTownCenter == true){
						YouBuildingTownCenter = false;
						TurtleActive = false;
						MeerkatActive = false;
						GroundhogActive = false;
					}
					if (MurlokBuildingTownCenter == true){
						MurlokBuildingTownCenter = false;
						MurlokActive = false;
					}
					if (GoblinBuildingTownCenter == true){
						GoblinBuildingTownCenter = false;
						GoblinActive = false;
					}
					if (WhelpBuildingTownCenter == true){
						WhelpBuildingTownCenter = false;
						WhelpActive = false;
					}
					if (BristleBuildingTownCenter == true){
						BristleBuildingTownCenter = false;
						BristleActive = false;
					}
					if (KnarlBuildingTownCenter == true){
						KnarlBuildingTownCenter = false;
						KnarlActive = false;
					}
					if (DuckBuildingTownCenter == true){
						DuckBuildingTownCenter = false;
						DuckActive = false;
					}
					if (BasiliskBuildingTownCenter == true){
						BasiliskBuildingTownCenter = false;
						BasiliskActive = false;
					}
					if (HobleheadBuildingTownCenter == true){
						HobleheadBuildingTownCenter = false;
						HobleheadActive = false;
					}
				}
				if (GranaryB == true && GranaryDays <= 0){
					System.out.println("");
					System.out.println("The Granary is complete!");
					System.out.println("Our FoodUse is only two thirds of what it used to be");
					System.out.println("");
					FoodUse = FoodUse / 3;
					FoodUse = FoodUse * 2;
					GranaryB = false;
					GranaryF = true;
					Granary = false;
					if (YouBuildingGranary == true){
						YouBuildingGranary = false;
						TurtleActive = false;
						MeerkatActive = false;
						GroundhogActive = false;
					}
					if (MurlokBuildingGranary == true){
						MurlokBuildingGranary = false;
						MurlokActive = false;
					}
					if (GoblinBuildingGranary == true){
						GoblinBuildingGranary = false;
						GoblinActive = false;
					}
					if (WhelpBuildingGranary == true){
						WhelpBuildingGranary = false;
						WhelpActive = false;
					}
					if (BristleBuildingGranary == true){
						BristleBuildingGranary = false;
						BristleActive = false;
					}
					if (KnarlBuildingGranary == true){
						KnarlBuildingGranary = false;
						KnarlActive = false;
					}
					if (DuckBuildingGranary == true){
						DuckBuildingGranary = false;
						DuckActive = false;
					}
					if (BasiliskBuildingGranary == true){
						BasiliskBuildingGranary = false;
						BasiliskActive = false;
					}
					if (HobleheadBuildingGranary == true){
						HobleheadBuildingGranary = false;
						HobleheadActive = false;
					}
				}
				//ADD STATS HERE WHEN CREATURES ADDED
				if (SmithB == true && SmithDays <= 0){
					System.out.println("");
					System.out.println("A Smith was completed!");
					System.out.println("Every statistic of every creature (even the ones you dont have) will now be a bit stronger");
					System.out.println("");
					Smith = true;
					SmithB = false;
					SmithF = true;
					SmithC += 1;

					you.setBuilding(you.getBuilding() + 1);
					you.setDefending(you.getDefending() + 1);
					you.setCutting(you.getCutting() + 1);
					you.setHunting(you.getHunting() + 1);
					you.setMining(you.getMining() + 1);
					you.setScollecting(you.getScollecting() + 1);

					Murlok.setBuilding(Murlok.getBuilding() + 1);
					Murlok.setDefending(Murlok.getDefending() + 1);
					Murlok.setCutting(Murlok.getCutting() + 1);
					Murlok.setHunting(Murlok.getHunting() + 1);
					Murlok.setMining(Murlok.getMining() + 1);
					Murlok.setScollecting(Murlok.getScollecting() + 1);

					Goblin.setBuilding(Goblin.getBuilding() + 1);
					Goblin.setDefending(Goblin.getDefending() + 1);
					Goblin.setCutting(Goblin.getCutting() + 1);
					Goblin.setHunting(Goblin.getHunting() + 1);
					Goblin.setMining(Goblin.getMining() + 1);
					Goblin.setScollecting(Goblin.getScollecting() + 1);

					Whelp.setBuilding(Whelp.getBuilding() + 1);
					Whelp.setDefending(Whelp.getDefending() + 1);
					Whelp.setCutting(Whelp.getCutting() + 1);
					Whelp.setHunting(Whelp.getHunting() + 1);
					Whelp.setMining(Whelp.getMining() + 1);
					Whelp.setScollecting(Whelp.getScollecting() + 1);

					Bristle.setBuilding(Bristle.getBuilding() + 1);
					Bristle.setDefending(Bristle.getDefending() + 1);
					Bristle.setCutting(Bristle.getCutting() + 1);
					Bristle.setHunting(Bristle.getHunting() + 1);
					Bristle.setMining(Bristle.getMining() + 1);
					Bristle.setScollecting(Bristle.getScollecting() + 1);

					Knarl.setBuilding(Knarl.getBuilding() + 1);
					Knarl.setDefending(Knarl.getDefending() + 1);
					Knarl.setCutting(Knarl.getCutting() + 1);
					Knarl.setHunting(Knarl.getHunting() + 1);
					Knarl.setMining(Knarl.getMining() + 1);
					Knarl.setScollecting(Knarl.getScollecting() + 1);

					Duck.setBuilding(Duck.getBuilding() + 1);
					Duck.setDefending(Duck.getDefending() + 1);
					Duck.setCutting(Duck.getCutting() + 1);
					Duck.setHunting(Duck.getHunting() + 1);
					Duck.setMining(Duck.getMining() + 1);
					Duck.setScollecting(Duck.getScollecting() + 1);

					Basilisk.setBuilding(Basilisk.getBuilding() + 1);
					Basilisk.setDefending(Basilisk.getDefending() + 1);
					Basilisk.setCutting(Basilisk.getCutting() + 1);
					Basilisk.setHunting(Basilisk.getHunting() + 1);
					Basilisk.setMining(Basilisk.getMining() + 1);
					Basilisk.setScollecting(Basilisk.getScollecting() + 1);

					Hoblehead.setBuilding(Hoblehead.getBuilding() + 1);
					Hoblehead.setDefending(Hoblehead.getDefending() + 1);
					Hoblehead.setCutting(Hoblehead.getCutting() + 1);
					Hoblehead.setHunting(Hoblehead.getHunting() + 1);
					Hoblehead.setMining(Hoblehead.getMining() + 1);
					Hoblehead.setScollecting(Hoblehead.getScollecting() + 1);

					if (YouBuildingSmith == true){
						YouBuildingSmith = false;
						TurtleActive = false;
						MeerkatActive = false;
						GroundhogActive = false;
					}
					if (MurlokBuildingSmith == true){
						MurlokBuildingSmith = false;
						MurlokActive = false;
					}
					if (GoblinBuildingSmith == true){
						GoblinBuildingSmith = false;
						GoblinActive = false;
					}
					if (WhelpBuildingSmith == true){
						WhelpBuildingSmith = false;
						WhelpActive = false;
					}
					if (BristleBuildingSmith == true){
						BristleBuildingSmith = false;
						BristleActive = false;
					}
					if (KnarlBuildingSmith == true){
						KnarlBuildingSmith = false;
						KnarlActive = false;
					}
					if (DuckBuildingSmith == true){
						DuckBuildingSmith = false;
						DuckActive = false;
					}
					if (BasiliskBuildingSmith == true){
						BasiliskBuildingSmith = false;
						BasiliskActive = false;
					}
					if (HobleheadBuildingSmith == true){
						HobleheadBuildingSmith = false;
						HobleheadActive = false;
					}
				}
				if (FarmB == true && FarmDays <= 0){
					System.out.println("");
					System.out.println("A Farm was completed!");
					System.out.println("This will be a nice passive source of food, we can keep building these if we want more passive food");
					System.out.println("");
					FarmBonus = true;
					FarmB = false;
					Farm = true;
					FarmF = true;
					FarmFood ++;
					FarmC += 1;

					if (YouBuildingFarm == true){
						YouBuildingFarm = false;
						TurtleActive = false;
						MeerkatActive = false;
						GroundhogActive = false;
					}
					if (MurlokBuildingFarm == true){
						MurlokBuildingFarm = false;
						MurlokActive = false;
					}
					if (GoblinBuildingFarm == true){
						GoblinBuildingFarm = false;
						GoblinActive = false;
					}
					if (WhelpBuildingFarm == true){
						WhelpBuildingFarm = false;
						WhelpActive = false;
					}
					if (BristleBuildingFarm == true){
						BristleBuildingFarm = false;
						BristleActive = false;
					}
					if (KnarlBuildingFarm == true){
						KnarlBuildingFarm = false;
						KnarlActive = false;
					}
					if (DuckBuildingFarm == true){
						DuckBuildingFarm = false;
						DuckActive = false;
					}
					if (BasiliskBuildingFarm == true){
						BasiliskBuildingFarm = false;
						BasiliskActive = false;
					}
					if (HobleheadBuildingFarm == true){
						HobleheadBuildingFarm = false;
						HobleheadActive = false;
					}
				}
				if (UFarmB == true && UFarmDays <= 0){
					System.out.println("");
					System.out.println("An UpgradedFarm was completed!");
					System.out.println("This really increase our food creation");
					System.out.println("");
					FarmFood = FarmFood + 3;
					UFarm = true;
					UFarmB = false;
					UFarmF = true;

					if (YouBuildingUFarm == true){
						YouBuildingUFarm = false;
						TurtleActive = false;
						MeerkatActive = false;
						GroundhogActive = false;
					}
					if (MurlokBuildingUFarm == true){
						MurlokBuildingUFarm = false;
						MurlokActive = false;
					}
					if (GoblinBuildingUFarm == true){
						GoblinBuildingUFarm = false;
						GoblinActive = false;
					}
					if (WhelpBuildingUFarm == true){
						WhelpBuildingUFarm = false;
						WhelpActive = false;
					}
					if (BristleBuildingUFarm == true){
						BristleBuildingUFarm = false;
						BristleActive = false;
					}
					if (KnarlBuildingUFarm == true){
						KnarlBuildingUFarm = false;
						KnarlActive = false;
					}
					if (DuckBuildingUFarm == true){
						DuckBuildingUFarm = false;
						DuckActive = false;
					}
					if (BasiliskBuildingUFarm == true){
						BasiliskBuildingUFarm = false;
						BasiliskActive = false;
					}
					if (HobleheadBuildingUFarm == true){
						HobleheadBuildingUFarm = false;
						HobleheadActive = false;
					}
				}
				if (HabitatB == true && HabitatDays <= 0){
					System.out.println("");
					System.out.println("The Habitat is complete!");
					System.out.println("A Murlok comes, 'Mmmrrrggglll', he joins you (uses 2 food a day)");
					Murlok.setName("murlok");
					CreatureMurlok = true;
					creatures += 1;
					HabitatF = true;
					HabitatB = false;
					FoodUse += 2;
					if (YouBuildingHabitat == true){
						YouBuildingHabitat = false;
						TurtleActive = false;
						MeerkatActive = false;
						GroundhogActive = false;
					}
					if (MurlokBuildingHabitat == true){
						MurlokBuildingHabitat = false;
						MurlokActive = false;
					}
					if (GoblinBuildingHabitat == true){
						GoblinBuildingHabitat = false;
						GoblinActive = false;
					}
					if (WhelpBuildingHabitat == true){
						WhelpBuildingHabitat = false;
						WhelpActive = false;
					}
					if (BristleBuildingHabitat == true){ 
						BristleBuildingHabitat = false;
						BristleActive = false;
					}
					if (KnarlBuildingHabitat == true){
						KnarlBuildingHabitat = false;
						KnarlActive = false;
					}
					if (DuckBuildingHabitat == true){
						DuckBuildingHabitat = false;
						DuckActive = false;
					}
					if (BasiliskBuildingHabitat == true){
						BasiliskBuildingHabitat = false;
						BasiliskActive = false;
					}
					if (HobleheadBuildingHabitat == true){
						HobleheadBuildingHabitat = false;
						HobleheadActive = false;
					}
				}
				if (TavernB == true && TavernDays <= 0){
					System.out.println("");
					System.out.println("The Tavern is complete!");
					System.out.println("You can now say 'recruit' and it will have a chance to recruit a new follower (they will use 3 food each, and you can recruit however many you find, theres 5 in total)");
					System.out.println("You also get a nice place for meals to be made, +1 food per day");
					Recruit = true;
					TavernB = false;
					FarmFood += 1;
					TavernF = true;
					if (YouBuildingTavern == true){
						YouBuildingTavern = false;
						TurtleActive = false;
						MeerkatActive = false;
						GroundhogActive = false;
					}
					if (MurlokBuildingTavern == true){
						MurlokBuildingTavern = false;
						MurlokActive = false;
					}
					if (GoblinBuildingTavern == true){
						GoblinBuildingTavern = false;
						GoblinActive = false;
					}
					if (WhelpBuildingTavern == true){
						WhelpBuildingTavern = false;
						WhelpActive = false;
					}
					if (BristleBuildingTavern == true){
						BristleBuildingTavern = false;
						BristleActive = false;
					}
					if (KnarlBuildingTavern == true){
						KnarlBuildingTavern = false;
						KnarlActive = false;
					}
					if (DuckBuildingTavern == true){
						DuckBuildingTavern = false;
						DuckActive = false;
					}
					if (BasiliskBuildingTavern == true){
						BasiliskBuildingTavern = false;
						BasiliskActive = false;
					}
					if (HobleheadBuildingTavern == true){
						HobleheadBuildingTavern = false;
						HobleheadActive = false;
					}
				}

				if (DayChoice == false && ETurn == true){
					DayChoice = true;
					ETurn = false;
				}

			}   //Day's choice end



			if (UWallsB == true){
				UWallsDays -= 1;
			}
			if (WallsB == true){
				WallsDays -= 1;
			}
			if (TownBoardB == true){
				TownBoardDays -= 1;
			}
			if (GranaryB == true){
				GranaryDays -= 1;
			}
			if (TavernB == true){
				TavernDays -= 1;
			}
			if (SmithB == true){
				SmithDays -= 1;
			}
			if (UFarmB == true){
				UFarmDays -= 1;
			}
			if (HabitatB == true){
				HabitatDays -= 1;
			}
			if (FarmB == true){
				FarmDays -= 1;
			}
			if (TownCenterB == true){
				TownCenterDays -= 1;
			}
			if (TownHallB == true){
				TownHallDays -= 1;
			}

			if (SmithC >= 2){
				Smith = false;
			}

			if (UWallsWait == true){
				UWallUU += 1;	
			}

			if (UWallUU == 10){
				System.out.println("");
				System.out.println("The walls have hardened, we can now add stone whenever");
				System.out.println("");
				UWallsWait = false;
				UWalls = true;
				UWallUU = 100;
			}

			if (TownHallF == true && TownBoardU == false){
				TownBoard = true;
				TownBoardU = true;
			}
			if (SmithC >= 2 && TavernF == true && TownHallU == false){
				TownHall = true;
				TownHallU = true;
			}
			if (SmithF == true && HabitatF == true && TavernU == false){
				Tavern = true;
				TavernU = true;
			}
			if (FarmC > 1 && HabitatF == true && GranaryU == false){
				Granary = true;
				GranaryU = true;
			}

			//----------------------------BUILDINGS DONE--------------------------------------
			if (Csap > 0){
				System.out.println("One of your creatures comes back with " + Csap + " sap");
				sap = sap + Csap;
				Csap = 0;
			}
			if (Cwood > 0){
				System.out.println("One of your creatures comes back with " + Cwood + " wood");
				wood = wood + Cwood;
				Cwood = 0;
			}
			if (Cstone > 0){
				System.out.println("One of your creatures comes back with " + Cstone + " stone");
				stone = stone + Cstone;
				Cstone = 0;
			}
			if (Cfood > 0){
				System.out.println("One of your creatures comes back with " + Cfood + " food");
				food = food + Cfood;
				Cfood = 0;
			}

			//--------------------------------BONUS UNLOCKS-----------------------------------
			if (FarmC == 3){
				Farm = false;
				UFarm = true;
			}


			you.setMdays(you.getMdays() + 1);

			Murlok.setMdays(Murlok.getMdays() + 1);

			Goblin.setMdays(Goblin.getMdays() + 1);

			Whelp.setMdays(Whelp.getMdays() + 1);

			Bristle.setMdays(Bristle.getMdays() + 1);

			Knarl.setMdays(Knarl.getMdays() + 1);

			Duck.setMdays(Duck.getMdays() + 1);

			Basilisk.setMdays(Basilisk.getMdays() + 1);

			Hoblehead.setMdays(Hoblehead.getMdays() + 1);

			if (MurlokActive == true){
				System.out.println("Murlok has been out for " + Murlok.getMdays() + " days");
			}
			if (GoblinActive == true){
				System.out.println("Goblin has been out for " + Goblin.getMdays() + " days");
			}
			if (WhelpActive == true){
				System.out.println("Whelp has been out for " + Whelp.getMdays() + " days");
			}
			if (BristleActive == true){
				System.out.println("Bristle has been out for " + Bristle.getMdays() + " days");
			}
			if (KnarlActive == true){
				System.out.println("Knarl has been out for " + Knarl.getMdays() + " days");
			}
			if (DuckActive == true){
				System.out.println("Dug (Duck) has been out for " + Duck.getMdays() + " days");
			}
			if (TurtleActive == true){
				System.out.println("Turtle has been out for " + you.getMdays() + " days");
			}
			if (GroundhogActive == true){
				System.out.println("Groundhog has been out for " + you.getMdays() + " days");
			}
			if (MeerkatActive == true){
				System.out.println("Meerkat has been out for " + you.getMdays() + " days");
			}
			if (BasiliskActive == true){
				System.out.println("Basilisk has been out for " + Basilisk.getMdays() + " days");
			}
			if (HobleheadActive == true){
				System.out.println("Hoblehead has been out for " + Hoblehead.getMdays() + " days");
			}
			if (FarmBonus = true){
				food = food + FarmFood;
			}
			if (CommandCenter == true){
				ETurn = true;
			}
			if (DayChoice == false){
				food = food - FoodUse;
				day += 1;
				Day = true;
				DayChoice = true;
				System.out.println("");
				Tchoice = false;
			}
			if (day == 70 && Extension == false){
				game = false;
				break;
			}
			if (day == 80){
				game = false;
				break;
			}
		} //this is the bracket that ends the game
		System.out.println("Game has ended, your final score is being tallied.");
		Bonus1 = food / 2;
		Bonus2 = wood / 3;
		Bonus3 = sap / 3;
		Bonus4 = stone / 3;
		if (FoodShortage > 1){
			Bonus5 = FoodShortage * 10;
		}
		if (FoodShortage <= 1){
			Bonus5 = 0;
		}
		if (TownHall == true){
			Bonus6 = 30;
		}
		Bonus7 = creatures * 7;
		if (Fountain = false){
			Score = Bonus1 + Bonus2 + Bonus3 + Bonus4 - Bonus5 + Bonus6 + Bonus7;
		}
		if (Fountain = true){
			Score = Bonus1 + Bonus2 + Bonus3 + Bonus4 - Bonus5 + Bonus6 + Bonus7 * 5 / 4;
		}
		
		System.out.println("Your final score is " +Score);
	}
}
